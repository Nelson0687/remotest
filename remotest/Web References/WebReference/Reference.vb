'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:4.0.30319.42000
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.42000。
'
Namespace WebReference

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceRTUSoap", [Namespace]:="http://tempuri.org/")>
    Partial Public Class ServiceRTU
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private RegistGCMOperationCompleted As System.Threading.SendOrPostCallback

        Private ifRegistGCMOperationCompleted As System.Threading.SendOrPostCallback

        Private UserToSoyalAllOperationCompleted As System.Threading.SendOrPostCallback

        Private UserToSoyalOperationCompleted As System.Threading.SendOrPostCallback

        Private AliasToSoyalOperationCompleted As System.Threading.SendOrPostCallback

        Private TimeZoneToSoyalOperationCompleted As System.Threading.SendOrPostCallback

        Private HolidayToSoyalOperationCompleted As System.Threading.SendOrPostCallback

        Private EraseSoyalDataOperationCompleted As System.Threading.SendOrPostCallback

        Private EraseSoyalAliasOperationCompleted As System.Threading.SendOrPostCallback

        Private EraseSoyalTimeZoneOperationCompleted As System.Threading.SendOrPostCallback

        Private TimeServerOperationCompleted As System.Threading.SendOrPostCallback

        Private FunNoValueUpdataOperationCompleted As System.Threading.SendOrPostCallback

        Private FunNoValueUpdataMultipleOperationCompleted As System.Threading.SendOrPostCallback

        Private Swtich_ONOperationCompleted As System.Threading.SendOrPostCallback

        Private Swtich_OFFOperationCompleted As System.Threading.SendOrPostCallback

        Private No_ButtonOperationCompleted As System.Threading.SendOrPostCallback

        Private Event_Ctrl_objOperationCompleted As System.Threading.SendOrPostCallback

        Private NC_ButtonOperationCompleted As System.Threading.SendOrPostCallback

        Private FunNoInquiryToInCmdOperationCompleted As System.Threading.SendOrPostCallback

        Private FunNoValueGetPLCOperationCompleted As System.Threading.SendOrPostCallback

        Private Turn_ButtonOperationCompleted As System.Threading.SendOrPostCallback

        Private objChgArrayOperationCompleted As System.Threading.SendOrPostCallback

        Private objArrayOperationCompleted As System.Threading.SendOrPostCallback

        Private UserSeventScreenOperationCompleted As System.Threading.SendOrPostCallback

        Private objEventOperationCompleted As System.Threading.SendOrPostCallback

        Private FunNoValueGetOperationCompleted As System.Threading.SendOrPostCallback

        Private objDisplyOperationCompleted As System.Threading.SendOrPostCallback

        Private objDisplyChgOperationCompleted As System.Threading.SendOrPostCallback

        Private DispRegistOperationCompleted As System.Threading.SendOrPostCallback

        Private DispMeterPowerOperationCompleted As System.Threading.SendOrPostCallback

        Private DisplyOperationCompleted As System.Threading.SendOrPostCallback

        Private DisplyChgOperationCompleted As System.Threading.SendOrPostCallback

        Private DyOperationCompleted As System.Threading.SendOrPostCallback

        Private DisplyEventOperationCompleted As System.Threading.SendOrPostCallback

        Private EventHodeScreenOperationCompleted As System.Threading.SendOrPostCallback

        Private 通信狀態OperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateSerialPortOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateDeviceOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateFunNoOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateTimerTemporaryOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateTimerEventOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateEvevtsOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateEvevtPLC_Music_OperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateDoorCardOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateScanCmdOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdataScanCmdPortOperationCompleted As System.Threading.SendOrPostCallback

        Private UdateTxtMsgChOperationCompleted As System.Threading.SendOrPostCallback

        Private InsertScheduleTemporaryOperationCompleted As System.Threading.SendOrPostCallback

        Private SearchScheduleTemporaryOperationCompleted As System.Threading.SendOrPostCallback

        Private DeleteScheduleTemporaryOperationCompleted As System.Threading.SendOrPostCallback

        Private irTransmitOperationCompleted As System.Threading.SendOrPostCallback

        Private irStudyOperationCompleted As System.Threading.SendOrPostCallback

        Private irSetAddressOperationCompleted As System.Threading.SendOrPostCallback

        Private irSetAllAddressOperationCompleted As System.Threading.SendOrPostCallback

        Private irSendCmdOperationCompleted As System.Threading.SendOrPostCallback

        Private irResponeStatusOperationCompleted As System.Threading.SendOrPostCallback

        Private PorjtToInCmdOperationCompleted As System.Threading.SendOrPostCallback

        Private ConfToInCmdOperationCompleted As System.Threading.SendOrPostCallback

        Private MusicGetOperationCompleted As System.Threading.SendOrPostCallback

        Private MusicClearOperationCompleted As System.Threading.SendOrPostCallback

        Private MusicExtUseOperationCompleted As System.Threading.SendOrPostCallback

        Private MusicRemotAtOperationCompleted As System.Threading.SendOrPostCallback

        Private SetMusicPopupTimeOperationCompleted As System.Threading.SendOrPostCallback

        Private TextGetOperationCompleted As System.Threading.SendOrPostCallback

        Private CameraToInCmdOperationCompleted As System.Threading.SendOrPostCallback

        Private CameraStatusListOperationCompleted As System.Threading.SendOrPostCallback

        Private addUpPageStyleOperationCompleted As System.Threading.SendOrPostCallback

        Private QuPageStyleOperationCompleted As System.Threading.SendOrPostCallback

        Private DelPageStyleOperationCompleted As System.Threading.SendOrPostCallback

        Private AuthQuantityOperationCompleted As System.Threading.SendOrPostCallback

        Private AddFunQutOperationCompleted As System.Threading.SendOrPostCallback

        Private AuthorityNoOperationCompleted As System.Threading.SendOrPostCallback

        Private AuthStatusOperationCompleted As System.Threading.SendOrPostCallback

        Private Regist_ActOperationCompleted As System.Threading.SendOrPostCallback

        Private SetRegitOperationCompleted As System.Threading.SendOrPostCallback

        Private GetRegistNoMsgOperationCompleted As System.Threading.SendOrPostCallback

        Private AllRegistOpenOperationCompleted As System.Threading.SendOrPostCallback

        Private 註冊碼取得OperationCompleted As System.Threading.SendOrPostCallback

        Private AuthNoUpdateOperationCompleted As System.Threading.SendOrPostCallback

        Private RegistNo_AuthNoUpdateOperationCompleted As System.Threading.SendOrPostCallback

        Private FunNoValueUpdataRecordOperationCompleted As System.Threading.SendOrPostCallback

        Private Swtich_ON_RecordOperationCompleted As System.Threading.SendOrPostCallback

        Private Swtich_OFF_RecordOperationCompleted As System.Threading.SendOrPostCallback

        Private No_Button_RecordOperationCompleted As System.Threading.SendOrPostCallback

        Private NC_Button_RecordOperationCompleted As System.Threading.SendOrPostCallback

        Private GetFunRecOperationCompleted As System.Threading.SendOrPostCallback

        Private GetFunRecstartEndOperationCompleted As System.Threading.SendOrPostCallback

        Private GetEventRecOperationCompleted As System.Threading.SendOrPostCallback

        Private useDefaultCredentialsSetExplicitly As Boolean

        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.remotest.My.MySettings.Default.remotest_WebReference_ServiceRTU
            If (Me.IsLocalFileSystemWebService(Me.Url) = True) Then
                Me.UseDefaultCredentials = True
                Me.useDefaultCredentialsSetExplicitly = False
            Else
                Me.useDefaultCredentialsSetExplicitly = True
            End If
        End Sub

        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = True) _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = False)) _
                            AndAlso (Me.IsLocalFileSystemWebService(Value) = False)) Then
                    MyBase.UseDefaultCredentials = False
                End If
                MyBase.Url = Value
            End Set
        End Property

        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = Value
                Me.useDefaultCredentialsSetExplicitly = True
            End Set
        End Property

        '''<remarks/>
        Public Event RegistGCMCompleted As RegistGCMCompletedEventHandler

        '''<remarks/>
        Public Event ifRegistGCMCompleted As ifRegistGCMCompletedEventHandler

        '''<remarks/>
        Public Event UserToSoyalAllCompleted As UserToSoyalAllCompletedEventHandler

        '''<remarks/>
        Public Event UserToSoyalCompleted As UserToSoyalCompletedEventHandler

        '''<remarks/>
        Public Event AliasToSoyalCompleted As AliasToSoyalCompletedEventHandler

        '''<remarks/>
        Public Event TimeZoneToSoyalCompleted As TimeZoneToSoyalCompletedEventHandler

        '''<remarks/>
        Public Event HolidayToSoyalCompleted As HolidayToSoyalCompletedEventHandler

        '''<remarks/>
        Public Event EraseSoyalDataCompleted As EraseSoyalDataCompletedEventHandler

        '''<remarks/>
        Public Event EraseSoyalAliasCompleted As EraseSoyalAliasCompletedEventHandler

        '''<remarks/>
        Public Event EraseSoyalTimeZoneCompleted As EraseSoyalTimeZoneCompletedEventHandler

        '''<remarks/>
        Public Event TimeServerCompleted As TimeServerCompletedEventHandler

        '''<remarks/>
        Public Event FunNoValueUpdataCompleted As FunNoValueUpdataCompletedEventHandler

        '''<remarks/>
        Public Event FunNoValueUpdataMultipleCompleted As FunNoValueUpdataMultipleCompletedEventHandler

        '''<remarks/>
        Public Event Swtich_ONCompleted As Swtich_ONCompletedEventHandler

        '''<remarks/>
        Public Event Swtich_OFFCompleted As Swtich_OFFCompletedEventHandler

        '''<remarks/>
        Public Event No_ButtonCompleted As No_ButtonCompletedEventHandler

        '''<remarks/>
        Public Event Event_Ctrl_objCompleted As Event_Ctrl_objCompletedEventHandler

        '''<remarks/>
        Public Event NC_ButtonCompleted As NC_ButtonCompletedEventHandler

        '''<remarks/>
        Public Event FunNoInquiryToInCmdCompleted As FunNoInquiryToInCmdCompletedEventHandler

        '''<remarks/>
        Public Event FunNoValueGetPLCCompleted As FunNoValueGetPLCCompletedEventHandler

        '''<remarks/>
        Public Event Turn_ButtonCompleted As Turn_ButtonCompletedEventHandler

        '''<remarks/>
        Public Event objChgArrayCompleted As objChgArrayCompletedEventHandler

        '''<remarks/>
        Public Event objArrayCompleted As objArrayCompletedEventHandler

        '''<remarks/>
        Public Event UserSeventScreenCompleted As UserSeventScreenCompletedEventHandler

        '''<remarks/>
        Public Event objEventCompleted As objEventCompletedEventHandler

        '''<remarks/>
        Public Event FunNoValueGetCompleted As FunNoValueGetCompletedEventHandler

        '''<remarks/>
        Public Event objDisplyCompleted As objDisplyCompletedEventHandler

        '''<remarks/>
        Public Event objDisplyChgCompleted As objDisplyChgCompletedEventHandler

        '''<remarks/>
        Public Event DispRegistCompleted As DispRegistCompletedEventHandler

        '''<remarks/>
        Public Event DispMeterPowerCompleted As DispMeterPowerCompletedEventHandler

        '''<remarks/>
        Public Event DisplyCompleted As DisplyCompletedEventHandler

        '''<remarks/>
        Public Event DisplyChgCompleted As DisplyChgCompletedEventHandler

        '''<remarks/>
        Public Event DyCompleted As DyCompletedEventHandler

        '''<remarks/>
        Public Event DisplyEventCompleted As DisplyEventCompletedEventHandler

        '''<remarks/>
        Public Event EventHodeScreenCompleted As EventHodeScreenCompletedEventHandler

        '''<remarks/>
        Public Event 通信狀態Completed As 通信狀態CompletedEventHandler

        '''<remarks/>
        Public Event UpdateCompleted As UpdateCompletedEventHandler

        '''<remarks/>
        Public Event UpdateSerialPortCompleted As UpdateSerialPortCompletedEventHandler

        '''<remarks/>
        Public Event UpdateDeviceCompleted As UpdateDeviceCompletedEventHandler

        '''<remarks/>
        Public Event UpdateFunNoCompleted As UpdateFunNoCompletedEventHandler

        '''<remarks/>
        Public Event UpdateTimerTemporaryCompleted As UpdateTimerTemporaryCompletedEventHandler

        '''<remarks/>
        Public Event UpdateTimerEventCompleted As UpdateTimerEventCompletedEventHandler

        '''<remarks/>
        Public Event UpdateEvevtsCompleted As UpdateEvevtsCompletedEventHandler

        '''<remarks/>
        Public Event UpdateEvevtPLC_Music_Completed As UpdateEvevtPLC_Music_CompletedEventHandler

        '''<remarks/>
        Public Event UpdateDoorCardCompleted As UpdateDoorCardCompletedEventHandler

        '''<remarks/>
        Public Event UpdateScanCmdCompleted As UpdateScanCmdCompletedEventHandler

        '''<remarks/>
        Public Event UpdataScanCmdPortCompleted As UpdataScanCmdPortCompletedEventHandler

        '''<remarks/>
        Public Event UdateTxtMsgChCompleted As UdateTxtMsgChCompletedEventHandler

        '''<remarks/>
        Public Event InsertScheduleTemporaryCompleted As InsertScheduleTemporaryCompletedEventHandler

        '''<remarks/>
        Public Event SearchScheduleTemporaryCompleted As SearchScheduleTemporaryCompletedEventHandler

        '''<remarks/>
        Public Event DeleteScheduleTemporaryCompleted As DeleteScheduleTemporaryCompletedEventHandler

        '''<remarks/>
        Public Event irTransmitCompleted As irTransmitCompletedEventHandler

        '''<remarks/>
        Public Event irStudyCompleted As irStudyCompletedEventHandler

        '''<remarks/>
        Public Event irSetAddressCompleted As irSetAddressCompletedEventHandler

        '''<remarks/>
        Public Event irSetAllAddressCompleted As irSetAllAddressCompletedEventHandler

        '''<remarks/>
        Public Event irSendCmdCompleted As irSendCmdCompletedEventHandler

        '''<remarks/>
        Public Event irResponeStatusCompleted As irResponeStatusCompletedEventHandler

        '''<remarks/>
        Public Event PorjtToInCmdCompleted As PorjtToInCmdCompletedEventHandler

        '''<remarks/>
        Public Event ConfToInCmdCompleted As ConfToInCmdCompletedEventHandler

        '''<remarks/>
        Public Event MusicGetCompleted As MusicGetCompletedEventHandler

        '''<remarks/>
        Public Event MusicClearCompleted As MusicClearCompletedEventHandler

        '''<remarks/>
        Public Event MusicExtUseCompleted As MusicExtUseCompletedEventHandler

        '''<remarks/>
        Public Event MusicRemotAtCompleted As MusicRemotAtCompletedEventHandler

        '''<remarks/>
        Public Event SetMusicPopupTimeCompleted As SetMusicPopupTimeCompletedEventHandler

        '''<remarks/>
        Public Event TextGetCompleted As TextGetCompletedEventHandler

        '''<remarks/>
        Public Event CameraToInCmdCompleted As CameraToInCmdCompletedEventHandler

        '''<remarks/>
        Public Event CameraStatusListCompleted As CameraStatusListCompletedEventHandler

        '''<remarks/>
        Public Event addUpPageStyleCompleted As addUpPageStyleCompletedEventHandler

        '''<remarks/>
        Public Event QuPageStyleCompleted As QuPageStyleCompletedEventHandler

        '''<remarks/>
        Public Event DelPageStyleCompleted As DelPageStyleCompletedEventHandler

        '''<remarks/>
        Public Event AuthQuantityCompleted As AuthQuantityCompletedEventHandler

        '''<remarks/>
        Public Event AddFunQutCompleted As AddFunQutCompletedEventHandler

        '''<remarks/>
        Public Event AuthorityNoCompleted As AuthorityNoCompletedEventHandler

        '''<remarks/>
        Public Event AuthStatusCompleted As AuthStatusCompletedEventHandler

        '''<remarks/>
        Public Event Regist_ActCompleted As Regist_ActCompletedEventHandler

        '''<remarks/>
        Public Event SetRegitCompleted As SetRegitCompletedEventHandler

        '''<remarks/>
        Public Event GetRegistNoMsgCompleted As GetRegistNoMsgCompletedEventHandler

        '''<remarks/>
        Public Event AllRegistOpenCompleted As AllRegistOpenCompletedEventHandler

        '''<remarks/>
        Public Event 註冊碼取得Completed As 註冊碼取得CompletedEventHandler

        '''<remarks/>
        Public Event AuthNoUpdateCompleted As AuthNoUpdateCompletedEventHandler

        '''<remarks/>
        Public Event RegistNo_AuthNoUpdateCompleted As RegistNo_AuthNoUpdateCompletedEventHandler

        '''<remarks/>
        Public Event FunNoValueUpdataRecordCompleted As FunNoValueUpdataRecordCompletedEventHandler

        '''<remarks/>
        Public Event Swtich_ON_RecordCompleted As Swtich_ON_RecordCompletedEventHandler

        '''<remarks/>
        Public Event Swtich_OFF_RecordCompleted As Swtich_OFF_RecordCompletedEventHandler

        '''<remarks/>
        Public Event No_Button_RecordCompleted As No_Button_RecordCompletedEventHandler

        '''<remarks/>
        Public Event NC_Button_RecordCompleted As NC_Button_RecordCompletedEventHandler

        '''<remarks/>
        Public Event GetFunRecCompleted As GetFunRecCompletedEventHandler

        '''<remarks/>
        Public Event GetFunRecstartEndCompleted As GetFunRecstartEndCompletedEventHandler

        '''<remarks/>
        Public Event GetEventRecCompleted As GetEventRecCompletedEventHandler

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegistGCM", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function RegistGCM(ByVal ProjectNo As String, ByVal RegistID As String) As String
            Dim results() As Object = Me.Invoke("RegistGCM", New Object() {ProjectNo, RegistID})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub RegistGCMAsync(ByVal ProjectNo As String, ByVal RegistID As String)
            Me.RegistGCMAsync(ProjectNo, RegistID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub RegistGCMAsync(ByVal ProjectNo As String, ByVal RegistID As String, ByVal userState As Object)
            If (Me.RegistGCMOperationCompleted Is Nothing) Then
                Me.RegistGCMOperationCompleted = AddressOf Me.OnRegistGCMOperationCompleted
            End If
            Me.InvokeAsync("RegistGCM", New Object() {ProjectNo, RegistID}, Me.RegistGCMOperationCompleted, userState)
        End Sub

        Private Sub OnRegistGCMOperationCompleted(ByVal arg As Object)
            If (Not (Me.RegistGCMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RegistGCMCompleted(Me, New RegistGCMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ifRegistGCM", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub ifRegistGCM()
            Me.Invoke("ifRegistGCM", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub ifRegistGCMAsync()
            Me.ifRegistGCMAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ifRegistGCMAsync(ByVal userState As Object)
            If (Me.ifRegistGCMOperationCompleted Is Nothing) Then
                Me.ifRegistGCMOperationCompleted = AddressOf Me.OnifRegistGCMOperationCompleted
            End If
            Me.InvokeAsync("ifRegistGCM", New Object(-1) {}, Me.ifRegistGCMOperationCompleted, userState)
        End Sub

        Private Sub OnifRegistGCMOperationCompleted(ByVal arg As Object)
            If (Not (Me.ifRegistGCMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ifRegistGCMCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserToSoyalAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UserToSoyalAll(
                    ByVal DeviceNo As String,
                    ByVal TagId As String,
                    ByVal PersonNo As String,
                    ByVal Name As String,
                    ByVal Sex As String,
                    ByVal Role As String,
                    ByVal Department As String,
                    ByVal _Class As String,
                    ByVal PinCode As String,
                    ByVal AccMode As String,
                    ByVal Patrol As Boolean,
                    ByVal ExpireCheck As Boolean,
                    ByVal AntiPasBack As Boolean,
                    ByVal WGZone As Boolean,
                    ByVal idexZone As Integer,
                    ByVal PswChang As Boolean,
                    ByVal Group1 As String,
                    ByVal Group2 As String,
                    ByVal ValidDate As String,
                    ByVal LevelRang As Integer,
                    ByVal LeveWGZone As Integer,
                    ByVal ExtAntiPasBack As Boolean)
            Me.Invoke("UserToSoyalAll", New Object() {DeviceNo, TagId, PersonNo, Name, Sex, Role, Department, _Class, PinCode, AccMode, Patrol, ExpireCheck, AntiPasBack, WGZone, idexZone, PswChang, Group1, Group2, ValidDate, LevelRang, LeveWGZone, ExtAntiPasBack})
        End Sub

        '''<remarks/>
        Public Overloads Sub UserToSoyalAllAsync(
                    ByVal DeviceNo As String,
                    ByVal TagId As String,
                    ByVal PersonNo As String,
                    ByVal Name As String,
                    ByVal Sex As String,
                    ByVal Role As String,
                    ByVal Department As String,
                    ByVal _Class As String,
                    ByVal PinCode As String,
                    ByVal AccMode As String,
                    ByVal Patrol As Boolean,
                    ByVal ExpireCheck As Boolean,
                    ByVal AntiPasBack As Boolean,
                    ByVal WGZone As Boolean,
                    ByVal idexZone As Integer,
                    ByVal PswChang As Boolean,
                    ByVal Group1 As String,
                    ByVal Group2 As String,
                    ByVal ValidDate As String,
                    ByVal LevelRang As Integer,
                    ByVal LeveWGZone As Integer,
                    ByVal ExtAntiPasBack As Boolean)
            Me.UserToSoyalAllAsync(DeviceNo, TagId, PersonNo, Name, Sex, Role, Department, _Class, PinCode, AccMode, Patrol, ExpireCheck, AntiPasBack, WGZone, idexZone, PswChang, Group1, Group2, ValidDate, LevelRang, LeveWGZone, ExtAntiPasBack, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UserToSoyalAllAsync(
                    ByVal DeviceNo As String,
                    ByVal TagId As String,
                    ByVal PersonNo As String,
                    ByVal Name As String,
                    ByVal Sex As String,
                    ByVal Role As String,
                    ByVal Department As String,
                    ByVal _Class As String,
                    ByVal PinCode As String,
                    ByVal AccMode As String,
                    ByVal Patrol As Boolean,
                    ByVal ExpireCheck As Boolean,
                    ByVal AntiPasBack As Boolean,
                    ByVal WGZone As Boolean,
                    ByVal idexZone As Integer,
                    ByVal PswChang As Boolean,
                    ByVal Group1 As String,
                    ByVal Group2 As String,
                    ByVal ValidDate As String,
                    ByVal LevelRang As Integer,
                    ByVal LeveWGZone As Integer,
                    ByVal ExtAntiPasBack As Boolean,
                    ByVal userState As Object)
            If (Me.UserToSoyalAllOperationCompleted Is Nothing) Then
                Me.UserToSoyalAllOperationCompleted = AddressOf Me.OnUserToSoyalAllOperationCompleted
            End If
            Me.InvokeAsync("UserToSoyalAll", New Object() {DeviceNo, TagId, PersonNo, Name, Sex, Role, Department, _Class, PinCode, AccMode, Patrol, ExpireCheck, AntiPasBack, WGZone, idexZone, PswChang, Group1, Group2, ValidDate, LevelRang, LeveWGZone, ExtAntiPasBack}, Me.UserToSoyalAllOperationCompleted, userState)
        End Sub

        Private Sub OnUserToSoyalAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserToSoyalAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserToSoyalAllCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserToSoyal", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UserToSoyal(
                    ByVal DeviceNo As String,
                    ByVal idexCard As Integer,
                    ByVal TagId As String,
                    ByVal PersonNo As String,
                    ByVal Name As String,
                    ByVal Sex As String,
                    ByVal Role As String,
                    ByVal Department As String,
                    ByVal _Class As String,
                    ByVal PinCode As String,
                    ByVal AccMode As String,
                    ByVal _Patrol As Boolean,
                    ByVal ExpireCheck As Boolean,
                    ByVal AntiPasBack As Boolean,
                    ByVal _PswChang As Boolean,
                    ByVal WGZone As Boolean,
                    ByVal idexZone As Integer,
                    ByVal Group1 As String,
                    ByVal Group2 As String,
                    ByVal ValidDate As String,
                    ByVal _LevelRang As Integer,
                    ByVal LeveWGZone As Integer,
                    ByVal _ExtAntiPasBack As Boolean)
            Me.Invoke("UserToSoyal", New Object() {DeviceNo, idexCard, TagId, PersonNo, Name, Sex, Role, Department, _Class, PinCode, AccMode, _Patrol, ExpireCheck, AntiPasBack, _PswChang, WGZone, idexZone, Group1, Group2, ValidDate, _LevelRang, LeveWGZone, _ExtAntiPasBack})
        End Sub

        '''<remarks/>
        Public Overloads Sub UserToSoyalAsync(
                    ByVal DeviceNo As String,
                    ByVal idexCard As Integer,
                    ByVal TagId As String,
                    ByVal PersonNo As String,
                    ByVal Name As String,
                    ByVal Sex As String,
                    ByVal Role As String,
                    ByVal Department As String,
                    ByVal _Class As String,
                    ByVal PinCode As String,
                    ByVal AccMode As String,
                    ByVal _Patrol As Boolean,
                    ByVal ExpireCheck As Boolean,
                    ByVal AntiPasBack As Boolean,
                    ByVal _PswChang As Boolean,
                    ByVal WGZone As Boolean,
                    ByVal idexZone As Integer,
                    ByVal Group1 As String,
                    ByVal Group2 As String,
                    ByVal ValidDate As String,
                    ByVal _LevelRang As Integer,
                    ByVal LeveWGZone As Integer,
                    ByVal _ExtAntiPasBack As Boolean)
            Me.UserToSoyalAsync(DeviceNo, idexCard, TagId, PersonNo, Name, Sex, Role, Department, _Class, PinCode, AccMode, _Patrol, ExpireCheck, AntiPasBack, _PswChang, WGZone, idexZone, Group1, Group2, ValidDate, _LevelRang, LeveWGZone, _ExtAntiPasBack, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UserToSoyalAsync(
                    ByVal DeviceNo As String,
                    ByVal idexCard As Integer,
                    ByVal TagId As String,
                    ByVal PersonNo As String,
                    ByVal Name As String,
                    ByVal Sex As String,
                    ByVal Role As String,
                    ByVal Department As String,
                    ByVal _Class As String,
                    ByVal PinCode As String,
                    ByVal AccMode As String,
                    ByVal _Patrol As Boolean,
                    ByVal ExpireCheck As Boolean,
                    ByVal AntiPasBack As Boolean,
                    ByVal _PswChang As Boolean,
                    ByVal WGZone As Boolean,
                    ByVal idexZone As Integer,
                    ByVal Group1 As String,
                    ByVal Group2 As String,
                    ByVal ValidDate As String,
                    ByVal _LevelRang As Integer,
                    ByVal LeveWGZone As Integer,
                    ByVal _ExtAntiPasBack As Boolean,
                    ByVal userState As Object)
            If (Me.UserToSoyalOperationCompleted Is Nothing) Then
                Me.UserToSoyalOperationCompleted = AddressOf Me.OnUserToSoyalOperationCompleted
            End If
            Me.InvokeAsync("UserToSoyal", New Object() {DeviceNo, idexCard, TagId, PersonNo, Name, Sex, Role, Department, _Class, PinCode, AccMode, _Patrol, ExpireCheck, AntiPasBack, _PswChang, WGZone, idexZone, Group1, Group2, ValidDate, _LevelRang, LeveWGZone, _ExtAntiPasBack}, Me.UserToSoyalOperationCompleted, userState)
        End Sub

        Private Sub OnUserToSoyalOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserToSoyalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserToSoyalCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AliasToSoyal", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub AliasToSoyal(ByVal DeviceNo As String, ByVal idexCard As Integer, ByVal Name As String)
            Me.Invoke("AliasToSoyal", New Object() {DeviceNo, idexCard, Name})
        End Sub

        '''<remarks/>
        Public Overloads Sub AliasToSoyalAsync(ByVal DeviceNo As String, ByVal idexCard As Integer, ByVal Name As String)
            Me.AliasToSoyalAsync(DeviceNo, idexCard, Name, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AliasToSoyalAsync(ByVal DeviceNo As String, ByVal idexCard As Integer, ByVal Name As String, ByVal userState As Object)
            If (Me.AliasToSoyalOperationCompleted Is Nothing) Then
                Me.AliasToSoyalOperationCompleted = AddressOf Me.OnAliasToSoyalOperationCompleted
            End If
            Me.InvokeAsync("AliasToSoyal", New Object() {DeviceNo, idexCard, Name}, Me.AliasToSoyalOperationCompleted, userState)
        End Sub

        Private Sub OnAliasToSoyalOperationCompleted(ByVal arg As Object)
            If (Not (Me.AliasToSoyalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AliasToSoyalCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TimeZoneToSoyal", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub TimeZoneToSoyal(ByVal DeviceNo As String)
            Me.Invoke("TimeZoneToSoyal", New Object() {DeviceNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub TimeZoneToSoyalAsync(ByVal DeviceNo As String)
            Me.TimeZoneToSoyalAsync(DeviceNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TimeZoneToSoyalAsync(ByVal DeviceNo As String, ByVal userState As Object)
            If (Me.TimeZoneToSoyalOperationCompleted Is Nothing) Then
                Me.TimeZoneToSoyalOperationCompleted = AddressOf Me.OnTimeZoneToSoyalOperationCompleted
            End If
            Me.InvokeAsync("TimeZoneToSoyal", New Object() {DeviceNo}, Me.TimeZoneToSoyalOperationCompleted, userState)
        End Sub

        Private Sub OnTimeZoneToSoyalOperationCompleted(ByVal arg As Object)
            If (Not (Me.TimeZoneToSoyalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TimeZoneToSoyalCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HolidayToSoyal", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub HolidayToSoyal(ByVal DeviceNo As String)
            Me.Invoke("HolidayToSoyal", New Object() {DeviceNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub HolidayToSoyalAsync(ByVal DeviceNo As String)
            Me.HolidayToSoyalAsync(DeviceNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub HolidayToSoyalAsync(ByVal DeviceNo As String, ByVal userState As Object)
            If (Me.HolidayToSoyalOperationCompleted Is Nothing) Then
                Me.HolidayToSoyalOperationCompleted = AddressOf Me.OnHolidayToSoyalOperationCompleted
            End If
            Me.InvokeAsync("HolidayToSoyal", New Object() {DeviceNo}, Me.HolidayToSoyalOperationCompleted, userState)
        End Sub

        Private Sub OnHolidayToSoyalOperationCompleted(ByVal arg As Object)
            If (Not (Me.HolidayToSoyalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HolidayToSoyalCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EraseSoyalData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub EraseSoyalData(ByVal DeviceNo As String)
            Me.Invoke("EraseSoyalData", New Object() {DeviceNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub EraseSoyalDataAsync(ByVal DeviceNo As String)
            Me.EraseSoyalDataAsync(DeviceNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EraseSoyalDataAsync(ByVal DeviceNo As String, ByVal userState As Object)
            If (Me.EraseSoyalDataOperationCompleted Is Nothing) Then
                Me.EraseSoyalDataOperationCompleted = AddressOf Me.OnEraseSoyalDataOperationCompleted
            End If
            Me.InvokeAsync("EraseSoyalData", New Object() {DeviceNo}, Me.EraseSoyalDataOperationCompleted, userState)
        End Sub

        Private Sub OnEraseSoyalDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.EraseSoyalDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EraseSoyalDataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EraseSoyalAlias", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub EraseSoyalAlias(ByVal DeviceNo As String)
            Me.Invoke("EraseSoyalAlias", New Object() {DeviceNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub EraseSoyalAliasAsync(ByVal DeviceNo As String)
            Me.EraseSoyalAliasAsync(DeviceNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EraseSoyalAliasAsync(ByVal DeviceNo As String, ByVal userState As Object)
            If (Me.EraseSoyalAliasOperationCompleted Is Nothing) Then
                Me.EraseSoyalAliasOperationCompleted = AddressOf Me.OnEraseSoyalAliasOperationCompleted
            End If
            Me.InvokeAsync("EraseSoyalAlias", New Object() {DeviceNo}, Me.EraseSoyalAliasOperationCompleted, userState)
        End Sub

        Private Sub OnEraseSoyalAliasOperationCompleted(ByVal arg As Object)
            If (Not (Me.EraseSoyalAliasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EraseSoyalAliasCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EraseSoyalTimeZone", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub EraseSoyalTimeZone(ByVal DeviceNo As String)
            Me.Invoke("EraseSoyalTimeZone", New Object() {DeviceNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub EraseSoyalTimeZoneAsync(ByVal DeviceNo As String)
            Me.EraseSoyalTimeZoneAsync(DeviceNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EraseSoyalTimeZoneAsync(ByVal DeviceNo As String, ByVal userState As Object)
            If (Me.EraseSoyalTimeZoneOperationCompleted Is Nothing) Then
                Me.EraseSoyalTimeZoneOperationCompleted = AddressOf Me.OnEraseSoyalTimeZoneOperationCompleted
            End If
            Me.InvokeAsync("EraseSoyalTimeZone", New Object() {DeviceNo}, Me.EraseSoyalTimeZoneOperationCompleted, userState)
        End Sub

        Private Sub OnEraseSoyalTimeZoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.EraseSoyalTimeZoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EraseSoyalTimeZoneCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TimeServer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function TimeServer() As String
            Dim results() As Object = Me.Invoke("TimeServer", New Object(-1) {})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub TimeServerAsync()
            Me.TimeServerAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TimeServerAsync(ByVal userState As Object)
            If (Me.TimeServerOperationCompleted Is Nothing) Then
                Me.TimeServerOperationCompleted = AddressOf Me.OnTimeServerOperationCompleted
            End If
            Me.InvokeAsync("TimeServer", New Object(-1) {}, Me.TimeServerOperationCompleted, userState)
        End Sub

        Private Sub OnTimeServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.TimeServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TimeServerCompleted(Me, New TimeServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FunNoValueUpdata", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub FunNoValueUpdata(ByVal FunNo As String, ByVal Value As String)
            Me.Invoke("FunNoValueUpdata", New Object() {FunNo, Value})
        End Sub

        '''<remarks/>
        Public Overloads Sub FunNoValueUpdataAsync(ByVal FunNo As String, ByVal Value As String)
            Me.FunNoValueUpdataAsync(FunNo, Value, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub FunNoValueUpdataAsync(ByVal FunNo As String, ByVal Value As String, ByVal userState As Object)
            If (Me.FunNoValueUpdataOperationCompleted Is Nothing) Then
                Me.FunNoValueUpdataOperationCompleted = AddressOf Me.OnFunNoValueUpdataOperationCompleted
            End If
            Me.InvokeAsync("FunNoValueUpdata", New Object() {FunNo, Value}, Me.FunNoValueUpdataOperationCompleted, userState)
        End Sub

        Private Sub OnFunNoValueUpdataOperationCompleted(ByVal arg As Object)
            If (Not (Me.FunNoValueUpdataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FunNoValueUpdataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FunNoValueUpdataMultiple", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub FunNoValueUpdataMultiple(ByVal FunNo As String, ByVal Value As String, ByVal Quantity As Integer)
            Me.Invoke("FunNoValueUpdataMultiple", New Object() {FunNo, Value, Quantity})
        End Sub

        '''<remarks/>
        Public Overloads Sub FunNoValueUpdataMultipleAsync(ByVal FunNo As String, ByVal Value As String, ByVal Quantity As Integer)
            Me.FunNoValueUpdataMultipleAsync(FunNo, Value, Quantity, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub FunNoValueUpdataMultipleAsync(ByVal FunNo As String, ByVal Value As String, ByVal Quantity As Integer, ByVal userState As Object)
            If (Me.FunNoValueUpdataMultipleOperationCompleted Is Nothing) Then
                Me.FunNoValueUpdataMultipleOperationCompleted = AddressOf Me.OnFunNoValueUpdataMultipleOperationCompleted
            End If
            Me.InvokeAsync("FunNoValueUpdataMultiple", New Object() {FunNo, Value, Quantity}, Me.FunNoValueUpdataMultipleOperationCompleted, userState)
        End Sub

        Private Sub OnFunNoValueUpdataMultipleOperationCompleted(ByVal arg As Object)
            If (Not (Me.FunNoValueUpdataMultipleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FunNoValueUpdataMultipleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Swtich_ON", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub Swtich_ON(ByVal FunNo As String)
            Me.Invoke("Swtich_ON", New Object() {FunNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub Swtich_ONAsync(ByVal FunNo As String)
            Me.Swtich_ONAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub Swtich_ONAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.Swtich_ONOperationCompleted Is Nothing) Then
                Me.Swtich_ONOperationCompleted = AddressOf Me.OnSwtich_ONOperationCompleted
            End If
            Me.InvokeAsync("Swtich_ON", New Object() {FunNo}, Me.Swtich_ONOperationCompleted, userState)
        End Sub

        Private Sub OnSwtich_ONOperationCompleted(ByVal arg As Object)
            If (Not (Me.Swtich_ONCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Swtich_ONCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Swtich_OFF", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub Swtich_OFF(ByVal FunNo As String)
            Me.Invoke("Swtich_OFF", New Object() {FunNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub Swtich_OFFAsync(ByVal FunNo As String)
            Me.Swtich_OFFAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub Swtich_OFFAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.Swtich_OFFOperationCompleted Is Nothing) Then
                Me.Swtich_OFFOperationCompleted = AddressOf Me.OnSwtich_OFFOperationCompleted
            End If
            Me.InvokeAsync("Swtich_OFF", New Object() {FunNo}, Me.Swtich_OFFOperationCompleted, userState)
        End Sub

        Private Sub OnSwtich_OFFOperationCompleted(ByVal arg As Object)
            If (Not (Me.Swtich_OFFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Swtich_OFFCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/No_Button", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub No_Button(ByVal FunNo As String)
            Me.Invoke("No_Button", New Object() {FunNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub No_ButtonAsync(ByVal FunNo As String)
            Me.No_ButtonAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub No_ButtonAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.No_ButtonOperationCompleted Is Nothing) Then
                Me.No_ButtonOperationCompleted = AddressOf Me.OnNo_ButtonOperationCompleted
            End If
            Me.InvokeAsync("No_Button", New Object() {FunNo}, Me.No_ButtonOperationCompleted, userState)
        End Sub

        Private Sub OnNo_ButtonOperationCompleted(ByVal arg As Object)
            If (Not (Me.No_ButtonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent No_ButtonCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Event_Ctrl_obj", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub Event_Ctrl_obj(ByVal EvenName As String, ByVal EdgeUp As Boolean)
            Me.Invoke("Event_Ctrl_obj", New Object() {EvenName, EdgeUp})
        End Sub

        '''<remarks/>
        Public Overloads Sub Event_Ctrl_objAsync(ByVal EvenName As String, ByVal EdgeUp As Boolean)
            Me.Event_Ctrl_objAsync(EvenName, EdgeUp, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub Event_Ctrl_objAsync(ByVal EvenName As String, ByVal EdgeUp As Boolean, ByVal userState As Object)
            If (Me.Event_Ctrl_objOperationCompleted Is Nothing) Then
                Me.Event_Ctrl_objOperationCompleted = AddressOf Me.OnEvent_Ctrl_objOperationCompleted
            End If
            Me.InvokeAsync("Event_Ctrl_obj", New Object() {EvenName, EdgeUp}, Me.Event_Ctrl_objOperationCompleted, userState)
        End Sub

        Private Sub OnEvent_Ctrl_objOperationCompleted(ByVal arg As Object)
            If (Not (Me.Event_Ctrl_objCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Event_Ctrl_objCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NC_Button", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub NC_Button(ByVal FunNo As String)
            Me.Invoke("NC_Button", New Object() {FunNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub NC_ButtonAsync(ByVal FunNo As String)
            Me.NC_ButtonAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub NC_ButtonAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.NC_ButtonOperationCompleted Is Nothing) Then
                Me.NC_ButtonOperationCompleted = AddressOf Me.OnNC_ButtonOperationCompleted
            End If
            Me.InvokeAsync("NC_Button", New Object() {FunNo}, Me.NC_ButtonOperationCompleted, userState)
        End Sub

        Private Sub OnNC_ButtonOperationCompleted(ByVal arg As Object)
            If (Not (Me.NC_ButtonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NC_ButtonCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FunNoInquiryToInCmd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub FunNoInquiryToInCmd(ByVal FunNo As String, ByVal Items As Integer)
            Me.Invoke("FunNoInquiryToInCmd", New Object() {FunNo, Items})
        End Sub

        '''<remarks/>
        Public Overloads Sub FunNoInquiryToInCmdAsync(ByVal FunNo As String, ByVal Items As Integer)
            Me.FunNoInquiryToInCmdAsync(FunNo, Items, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub FunNoInquiryToInCmdAsync(ByVal FunNo As String, ByVal Items As Integer, ByVal userState As Object)
            If (Me.FunNoInquiryToInCmdOperationCompleted Is Nothing) Then
                Me.FunNoInquiryToInCmdOperationCompleted = AddressOf Me.OnFunNoInquiryToInCmdOperationCompleted
            End If
            Me.InvokeAsync("FunNoInquiryToInCmd", New Object() {FunNo, Items}, Me.FunNoInquiryToInCmdOperationCompleted, userState)
        End Sub

        Private Sub OnFunNoInquiryToInCmdOperationCompleted(ByVal arg As Object)
            If (Not (Me.FunNoInquiryToInCmdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FunNoInquiryToInCmdCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FunNoValueGetPLC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function FunNoValueGetPLC(ByVal FunNo As String) As String
            Dim results() As Object = Me.Invoke("FunNoValueGetPLC", New Object() {FunNo})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub FunNoValueGetPLCAsync(ByVal FunNo As String)
            Me.FunNoValueGetPLCAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub FunNoValueGetPLCAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.FunNoValueGetPLCOperationCompleted Is Nothing) Then
                Me.FunNoValueGetPLCOperationCompleted = AddressOf Me.OnFunNoValueGetPLCOperationCompleted
            End If
            Me.InvokeAsync("FunNoValueGetPLC", New Object() {FunNo}, Me.FunNoValueGetPLCOperationCompleted, userState)
        End Sub

        Private Sub OnFunNoValueGetPLCOperationCompleted(ByVal arg As Object)
            If (Not (Me.FunNoValueGetPLCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FunNoValueGetPLCCompleted(Me, New FunNoValueGetPLCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Turn_Button", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function Turn_Button(ByVal FunNo As String) As Boolean
            Dim results() As Object = Me.Invoke("Turn_Button", New Object() {FunNo})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub Turn_ButtonAsync(ByVal FunNo As String)
            Me.Turn_ButtonAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub Turn_ButtonAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.Turn_ButtonOperationCompleted Is Nothing) Then
                Me.Turn_ButtonOperationCompleted = AddressOf Me.OnTurn_ButtonOperationCompleted
            End If
            Me.InvokeAsync("Turn_Button", New Object() {FunNo}, Me.Turn_ButtonOperationCompleted, userState)
        End Sub

        Private Sub OnTurn_ButtonOperationCompleted(ByVal arg As Object)
            If (Not (Me.Turn_ButtonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Turn_ButtonCompleted(Me, New Turn_ButtonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/objChgArray", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function objChgArray() As String()
            Dim results() As Object = Me.Invoke("objChgArray", New Object(-1) {})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub objChgArrayAsync()
            Me.objChgArrayAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub objChgArrayAsync(ByVal userState As Object)
            If (Me.objChgArrayOperationCompleted Is Nothing) Then
                Me.objChgArrayOperationCompleted = AddressOf Me.OnobjChgArrayOperationCompleted
            End If
            Me.InvokeAsync("objChgArray", New Object(-1) {}, Me.objChgArrayOperationCompleted, userState)
        End Sub

        Private Sub OnobjChgArrayOperationCompleted(ByVal arg As Object)
            If (Not (Me.objChgArrayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent objChgArrayCompleted(Me, New objChgArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/objArray", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function objArray() As String()
            Dim results() As Object = Me.Invoke("objArray", New Object(-1) {})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub objArrayAsync()
            Me.objArrayAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub objArrayAsync(ByVal userState As Object)
            If (Me.objArrayOperationCompleted Is Nothing) Then
                Me.objArrayOperationCompleted = AddressOf Me.OnobjArrayOperationCompleted
            End If
            Me.InvokeAsync("objArray", New Object(-1) {}, Me.objArrayOperationCompleted, userState)
        End Sub

        Private Sub OnobjArrayOperationCompleted(ByVal arg As Object)
            If (Not (Me.objArrayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent objArrayCompleted(Me, New objArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserSeventScreen", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function UserSeventScreen(ByVal UserName As String) As String()
            Dim results() As Object = Me.Invoke("UserSeventScreen", New Object() {UserName})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub UserSeventScreenAsync(ByVal UserName As String)
            Me.UserSeventScreenAsync(UserName, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UserSeventScreenAsync(ByVal UserName As String, ByVal userState As Object)
            If (Me.UserSeventScreenOperationCompleted Is Nothing) Then
                Me.UserSeventScreenOperationCompleted = AddressOf Me.OnUserSeventScreenOperationCompleted
            End If
            Me.InvokeAsync("UserSeventScreen", New Object() {UserName}, Me.UserSeventScreenOperationCompleted, userState)
        End Sub

        Private Sub OnUserSeventScreenOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserSeventScreenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserSeventScreenCompleted(Me, New UserSeventScreenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/objEvent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function objEvent(ByVal No As Integer) As String()
            Dim results() As Object = Me.Invoke("objEvent", New Object() {No})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub objEventAsync(ByVal No As Integer)
            Me.objEventAsync(No, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub objEventAsync(ByVal No As Integer, ByVal userState As Object)
            If (Me.objEventOperationCompleted Is Nothing) Then
                Me.objEventOperationCompleted = AddressOf Me.OnobjEventOperationCompleted
            End If
            Me.InvokeAsync("objEvent", New Object() {No}, Me.objEventOperationCompleted, userState)
        End Sub

        Private Sub OnobjEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.objEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent objEventCompleted(Me, New objEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FunNoValueGet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function FunNoValueGet(ByVal FunNo As String) As String
            Dim results() As Object = Me.Invoke("FunNoValueGet", New Object() {FunNo})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub FunNoValueGetAsync(ByVal FunNo As String)
            Me.FunNoValueGetAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub FunNoValueGetAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.FunNoValueGetOperationCompleted Is Nothing) Then
                Me.FunNoValueGetOperationCompleted = AddressOf Me.OnFunNoValueGetOperationCompleted
            End If
            Me.InvokeAsync("FunNoValueGet", New Object() {FunNo}, Me.FunNoValueGetOperationCompleted, userState)
        End Sub

        Private Sub OnFunNoValueGetOperationCompleted(ByVal arg As Object)
            If (Not (Me.FunNoValueGetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FunNoValueGetCompleted(Me, New FunNoValueGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/objDisply", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function objDisply(ByVal FunNo As String) As String()
            Dim results() As Object = Me.Invoke("objDisply", New Object() {FunNo})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub objDisplyAsync(ByVal FunNo As String)
            Me.objDisplyAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub objDisplyAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.objDisplyOperationCompleted Is Nothing) Then
                Me.objDisplyOperationCompleted = AddressOf Me.OnobjDisplyOperationCompleted
            End If
            Me.InvokeAsync("objDisply", New Object() {FunNo}, Me.objDisplyOperationCompleted, userState)
        End Sub

        Private Sub OnobjDisplyOperationCompleted(ByVal arg As Object)
            If (Not (Me.objDisplyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent objDisplyCompleted(Me, New objDisplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/objDisplyChg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function objDisplyChg(ByVal FunNo As String) As String()
            Dim results() As Object = Me.Invoke("objDisplyChg", New Object() {FunNo})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub objDisplyChgAsync(ByVal FunNo As String)
            Me.objDisplyChgAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub objDisplyChgAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.objDisplyChgOperationCompleted Is Nothing) Then
                Me.objDisplyChgOperationCompleted = AddressOf Me.OnobjDisplyChgOperationCompleted
            End If
            Me.InvokeAsync("objDisplyChg", New Object() {FunNo}, Me.objDisplyChgOperationCompleted, userState)
        End Sub

        Private Sub OnobjDisplyChgOperationCompleted(ByVal arg As Object)
            If (Not (Me.objDisplyChgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent objDisplyChgCompleted(Me, New objDisplyChgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DispRegist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function DispRegist(ByVal FunNo As String) As String()
            Dim results() As Object = Me.Invoke("DispRegist", New Object() {FunNo})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub DispRegistAsync(ByVal FunNo As String)
            Me.DispRegistAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub DispRegistAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.DispRegistOperationCompleted Is Nothing) Then
                Me.DispRegistOperationCompleted = AddressOf Me.OnDispRegistOperationCompleted
            End If
            Me.InvokeAsync("DispRegist", New Object() {FunNo}, Me.DispRegistOperationCompleted, userState)
        End Sub

        Private Sub OnDispRegistOperationCompleted(ByVal arg As Object)
            If (Not (Me.DispRegistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DispRegistCompleted(Me, New DispRegistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DispMeterPower", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function DispMeterPower(ByVal FunNo As String) As String()
            Dim results() As Object = Me.Invoke("DispMeterPower", New Object() {FunNo})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub DispMeterPowerAsync(ByVal FunNo As String)
            Me.DispMeterPowerAsync(FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub DispMeterPowerAsync(ByVal FunNo As String, ByVal userState As Object)
            If (Me.DispMeterPowerOperationCompleted Is Nothing) Then
                Me.DispMeterPowerOperationCompleted = AddressOf Me.OnDispMeterPowerOperationCompleted
            End If
            Me.InvokeAsync("DispMeterPower", New Object() {FunNo}, Me.DispMeterPowerOperationCompleted, userState)
        End Sub

        Private Sub OnDispMeterPowerOperationCompleted(ByVal arg As Object)
            If (Not (Me.DispMeterPowerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DispMeterPowerCompleted(Me, New DispMeterPowerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Disply", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function Disply() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("Disply", New Object(-1) {})
            Return CType(results(0), System.Data.DataTable)
        End Function

        '''<remarks/>
        Public Overloads Sub DisplyAsync()
            Me.DisplyAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub DisplyAsync(ByVal userState As Object)
            If (Me.DisplyOperationCompleted Is Nothing) Then
                Me.DisplyOperationCompleted = AddressOf Me.OnDisplyOperationCompleted
            End If
            Me.InvokeAsync("Disply", New Object(-1) {}, Me.DisplyOperationCompleted, userState)
        End Sub

        Private Sub OnDisplyOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisplyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisplyCompleted(Me, New DisplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisplyChg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function DisplyChg() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("DisplyChg", New Object(-1) {})
            Return CType(results(0), System.Data.DataTable)
        End Function

        '''<remarks/>
        Public Overloads Sub DisplyChgAsync()
            Me.DisplyChgAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub DisplyChgAsync(ByVal userState As Object)
            If (Me.DisplyChgOperationCompleted Is Nothing) Then
                Me.DisplyChgOperationCompleted = AddressOf Me.OnDisplyChgOperationCompleted
            End If
            Me.InvokeAsync("DisplyChg", New Object(-1) {}, Me.DisplyChgOperationCompleted, userState)
        End Sub

        Private Sub OnDisplyChgOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisplyChgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisplyChgCompleted(Me, New DisplyChgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Dy", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function Dy() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Dy", New Object(-1) {})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub DyAsync()
            Me.DyAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub DyAsync(ByVal userState As Object)
            If (Me.DyOperationCompleted Is Nothing) Then
                Me.DyOperationCompleted = AddressOf Me.OnDyOperationCompleted
            End If
            Me.InvokeAsync("Dy", New Object(-1) {}, Me.DyOperationCompleted, userState)
        End Sub

        Private Sub OnDyOperationCompleted(ByVal arg As Object)
            If (Not (Me.DyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DyCompleted(Me, New DyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisplyEvent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function DisplyEvent() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("DisplyEvent", New Object(-1) {})
            Return CType(results(0), System.Data.DataTable)
        End Function

        '''<remarks/>
        Public Overloads Sub DisplyEventAsync()
            Me.DisplyEventAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub DisplyEventAsync(ByVal userState As Object)
            If (Me.DisplyEventOperationCompleted Is Nothing) Then
                Me.DisplyEventOperationCompleted = AddressOf Me.OnDisplyEventOperationCompleted
            End If
            Me.InvokeAsync("DisplyEvent", New Object(-1) {}, Me.DisplyEventOperationCompleted, userState)
        End Sub

        Private Sub OnDisplyEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisplyEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisplyEventCompleted(Me, New DisplyEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EventHodeScreen", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function EventHodeScreen() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("EventHodeScreen", New Object(-1) {})
            Return CType(results(0), System.Data.DataTable)
        End Function

        '''<remarks/>
        Public Overloads Sub EventHodeScreenAsync()
            Me.EventHodeScreenAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EventHodeScreenAsync(ByVal userState As Object)
            If (Me.EventHodeScreenOperationCompleted Is Nothing) Then
                Me.EventHodeScreenOperationCompleted = AddressOf Me.OnEventHodeScreenOperationCompleted
            End If
            Me.InvokeAsync("EventHodeScreen", New Object(-1) {}, Me.EventHodeScreenOperationCompleted, userState)
        End Sub

        Private Sub OnEventHodeScreenOperationCompleted(ByVal arg As Object)
            If (Not (Me.EventHodeScreenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EventHodeScreenCompleted(Me, New EventHodeScreenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/通信狀態", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function 通信狀態() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("通信狀態", New Object(-1) {})
            Return CType(results(0), System.Data.DataTable)
        End Function

        '''<remarks/>
        Public Overloads Sub 通信狀態Async()
            Me.通信狀態Async(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub 通信狀態Async(ByVal userState As Object)
            If (Me.通信狀態OperationCompleted Is Nothing) Then
                Me.通信狀態OperationCompleted = AddressOf Me.On通信狀態OperationCompleted
            End If
            Me.InvokeAsync("通信狀態", New Object(-1) {}, Me.通信狀態OperationCompleted, userState)
        End Sub

        Private Sub On通信狀態OperationCompleted(ByVal arg As Object)
            If (Not (Me.通信狀態CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent 通信狀態Completed(Me, New 通信狀態CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub Update()
            Me.Invoke("Update", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateAsync()
            Me.UpdateAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateAsync(ByVal userState As Object)
            If (Me.UpdateOperationCompleted Is Nothing) Then
                Me.UpdateOperationCompleted = AddressOf Me.OnUpdateOperationCompleted
            End If
            Me.InvokeAsync("Update", New Object(-1) {}, Me.UpdateOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSerialPort", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateSerialPort()
            Me.Invoke("UpdateSerialPort", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateSerialPortAsync()
            Me.UpdateSerialPortAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateSerialPortAsync(ByVal userState As Object)
            If (Me.UpdateSerialPortOperationCompleted Is Nothing) Then
                Me.UpdateSerialPortOperationCompleted = AddressOf Me.OnUpdateSerialPortOperationCompleted
            End If
            Me.InvokeAsync("UpdateSerialPort", New Object(-1) {}, Me.UpdateSerialPortOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateSerialPortOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSerialPortCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSerialPortCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDevice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateDevice()
            Me.Invoke("UpdateDevice", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateDeviceAsync()
            Me.UpdateDeviceAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateDeviceAsync(ByVal userState As Object)
            If (Me.UpdateDeviceOperationCompleted Is Nothing) Then
                Me.UpdateDeviceOperationCompleted = AddressOf Me.OnUpdateDeviceOperationCompleted
            End If
            Me.InvokeAsync("UpdateDevice", New Object(-1) {}, Me.UpdateDeviceOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateDeviceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDeviceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDeviceCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFunNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateFunNo()
            Me.Invoke("UpdateFunNo", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateFunNoAsync()
            Me.UpdateFunNoAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateFunNoAsync(ByVal userState As Object)
            If (Me.UpdateFunNoOperationCompleted Is Nothing) Then
                Me.UpdateFunNoOperationCompleted = AddressOf Me.OnUpdateFunNoOperationCompleted
            End If
            Me.InvokeAsync("UpdateFunNo", New Object(-1) {}, Me.UpdateFunNoOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateFunNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFunNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFunNoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTimerTemporary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateTimerTemporary()
            Me.Invoke("UpdateTimerTemporary", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateTimerTemporaryAsync()
            Me.UpdateTimerTemporaryAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateTimerTemporaryAsync(ByVal userState As Object)
            If (Me.UpdateTimerTemporaryOperationCompleted Is Nothing) Then
                Me.UpdateTimerTemporaryOperationCompleted = AddressOf Me.OnUpdateTimerTemporaryOperationCompleted
            End If
            Me.InvokeAsync("UpdateTimerTemporary", New Object(-1) {}, Me.UpdateTimerTemporaryOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateTimerTemporaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTimerTemporaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTimerTemporaryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTimerEvent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateTimerEvent()
            Me.Invoke("UpdateTimerEvent", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateTimerEventAsync()
            Me.UpdateTimerEventAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateTimerEventAsync(ByVal userState As Object)
            If (Me.UpdateTimerEventOperationCompleted Is Nothing) Then
                Me.UpdateTimerEventOperationCompleted = AddressOf Me.OnUpdateTimerEventOperationCompleted
            End If
            Me.InvokeAsync("UpdateTimerEvent", New Object(-1) {}, Me.UpdateTimerEventOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateTimerEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTimerEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTimerEventCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEvevts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateEvevts()
            Me.Invoke("UpdateEvevts", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateEvevtsAsync()
            Me.UpdateEvevtsAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateEvevtsAsync(ByVal userState As Object)
            If (Me.UpdateEvevtsOperationCompleted Is Nothing) Then
                Me.UpdateEvevtsOperationCompleted = AddressOf Me.OnUpdateEvevtsOperationCompleted
            End If
            Me.InvokeAsync("UpdateEvevts", New Object(-1) {}, Me.UpdateEvevtsOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateEvevtsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEvevtsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEvevtsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEvevtPLC_Music_", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateEvevtPLC_Music_()
            Me.Invoke("UpdateEvevtPLC_Music_", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateEvevtPLC_Music_Async()
            Me.UpdateEvevtPLC_Music_Async(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateEvevtPLC_Music_Async(ByVal userState As Object)
            If (Me.UpdateEvevtPLC_Music_OperationCompleted Is Nothing) Then
                Me.UpdateEvevtPLC_Music_OperationCompleted = AddressOf Me.OnUpdateEvevtPLC_Music_OperationCompleted
            End If
            Me.InvokeAsync("UpdateEvevtPLC_Music_", New Object(-1) {}, Me.UpdateEvevtPLC_Music_OperationCompleted, userState)
        End Sub

        Private Sub OnUpdateEvevtPLC_Music_OperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEvevtPLC_Music_CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEvevtPLC_Music_Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDoorCard", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateDoorCard()
            Me.Invoke("UpdateDoorCard", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateDoorCardAsync()
            Me.UpdateDoorCardAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateDoorCardAsync(ByVal userState As Object)
            If (Me.UpdateDoorCardOperationCompleted Is Nothing) Then
                Me.UpdateDoorCardOperationCompleted = AddressOf Me.OnUpdateDoorCardOperationCompleted
            End If
            Me.InvokeAsync("UpdateDoorCard", New Object(-1) {}, Me.UpdateDoorCardOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateDoorCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDoorCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDoorCardCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateScanCmd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateScanCmd()
            Me.Invoke("UpdateScanCmd", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateScanCmdAsync()
            Me.UpdateScanCmdAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateScanCmdAsync(ByVal userState As Object)
            If (Me.UpdateScanCmdOperationCompleted Is Nothing) Then
                Me.UpdateScanCmdOperationCompleted = AddressOf Me.OnUpdateScanCmdOperationCompleted
            End If
            Me.InvokeAsync("UpdateScanCmd", New Object(-1) {}, Me.UpdateScanCmdOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateScanCmdOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateScanCmdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateScanCmdCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdataScanCmdPort", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdataScanCmdPort(ByVal CnnPort As String)
            Me.Invoke("UpdataScanCmdPort", New Object() {CnnPort})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdataScanCmdPortAsync(ByVal CnnPort As String)
            Me.UpdataScanCmdPortAsync(CnnPort, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdataScanCmdPortAsync(ByVal CnnPort As String, ByVal userState As Object)
            If (Me.UpdataScanCmdPortOperationCompleted Is Nothing) Then
                Me.UpdataScanCmdPortOperationCompleted = AddressOf Me.OnUpdataScanCmdPortOperationCompleted
            End If
            Me.InvokeAsync("UpdataScanCmdPort", New Object() {CnnPort}, Me.UpdataScanCmdPortOperationCompleted, userState)
        End Sub

        Private Sub OnUpdataScanCmdPortOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdataScanCmdPortCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdataScanCmdPortCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UdateTxtMsgCh", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UdateTxtMsgCh()
            Me.Invoke("UdateTxtMsgCh", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub UdateTxtMsgChAsync()
            Me.UdateTxtMsgChAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UdateTxtMsgChAsync(ByVal userState As Object)
            If (Me.UdateTxtMsgChOperationCompleted Is Nothing) Then
                Me.UdateTxtMsgChOperationCompleted = AddressOf Me.OnUdateTxtMsgChOperationCompleted
            End If
            Me.InvokeAsync("UdateTxtMsgCh", New Object(-1) {}, Me.UdateTxtMsgChOperationCompleted, userState)
        End Sub

        Private Sub OnUdateTxtMsgChOperationCompleted(ByVal arg As Object)
            If (Not (Me.UdateTxtMsgChCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UdateTxtMsgChCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertScheduleTemporary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub InsertScheduleTemporary(ByVal year As Integer, ByVal month As Integer, ByVal day As Integer, ByVal StartHour As Integer, ByVal StartMinute As Integer, ByVal StartSecond As Integer, ByVal EndHour As Integer, ByVal EndMinute As Integer, ByVal EndSecond As Integer, ByVal CtrlObj As String, ByVal StartValue As String, ByVal EndValue As String, ByVal Keep As Integer)
            Me.Invoke("InsertScheduleTemporary", New Object() {year, month, day, StartHour, StartMinute, StartSecond, EndHour, EndMinute, EndSecond, CtrlObj, StartValue, EndValue, Keep})
        End Sub

        '''<remarks/>
        Public Overloads Sub InsertScheduleTemporaryAsync(ByVal year As Integer, ByVal month As Integer, ByVal day As Integer, ByVal StartHour As Integer, ByVal StartMinute As Integer, ByVal StartSecond As Integer, ByVal EndHour As Integer, ByVal EndMinute As Integer, ByVal EndSecond As Integer, ByVal CtrlObj As String, ByVal StartValue As String, ByVal EndValue As String, ByVal Keep As Integer)
            Me.InsertScheduleTemporaryAsync(year, month, day, StartHour, StartMinute, StartSecond, EndHour, EndMinute, EndSecond, CtrlObj, StartValue, EndValue, Keep, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub InsertScheduleTemporaryAsync(ByVal year As Integer, ByVal month As Integer, ByVal day As Integer, ByVal StartHour As Integer, ByVal StartMinute As Integer, ByVal StartSecond As Integer, ByVal EndHour As Integer, ByVal EndMinute As Integer, ByVal EndSecond As Integer, ByVal CtrlObj As String, ByVal StartValue As String, ByVal EndValue As String, ByVal Keep As Integer, ByVal userState As Object)
            If (Me.InsertScheduleTemporaryOperationCompleted Is Nothing) Then
                Me.InsertScheduleTemporaryOperationCompleted = AddressOf Me.OnInsertScheduleTemporaryOperationCompleted
            End If
            Me.InvokeAsync("InsertScheduleTemporary", New Object() {year, month, day, StartHour, StartMinute, StartSecond, EndHour, EndMinute, EndSecond, CtrlObj, StartValue, EndValue, Keep}, Me.InsertScheduleTemporaryOperationCompleted, userState)
        End Sub

        Private Sub OnInsertScheduleTemporaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertScheduleTemporaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertScheduleTemporaryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchScheduleTemporary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function SearchScheduleTemporary(ByVal CtrlObj As String) As Object()
            Dim results() As Object = Me.Invoke("SearchScheduleTemporary", New Object() {CtrlObj})
            Return CType(results(0), Object())
        End Function

        '''<remarks/>
        Public Overloads Sub SearchScheduleTemporaryAsync(ByVal CtrlObj As String)
            Me.SearchScheduleTemporaryAsync(CtrlObj, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub SearchScheduleTemporaryAsync(ByVal CtrlObj As String, ByVal userState As Object)
            If (Me.SearchScheduleTemporaryOperationCompleted Is Nothing) Then
                Me.SearchScheduleTemporaryOperationCompleted = AddressOf Me.OnSearchScheduleTemporaryOperationCompleted
            End If
            Me.InvokeAsync("SearchScheduleTemporary", New Object() {CtrlObj}, Me.SearchScheduleTemporaryOperationCompleted, userState)
        End Sub

        Private Sub OnSearchScheduleTemporaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.SearchScheduleTemporaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SearchScheduleTemporaryCompleted(Me, New SearchScheduleTemporaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteScheduleTemporary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub DeleteScheduleTemporary(ByVal SnNO As String)
            Me.Invoke("DeleteScheduleTemporary", New Object() {SnNO})
        End Sub

        '''<remarks/>
        Public Overloads Sub DeleteScheduleTemporaryAsync(ByVal SnNO As String)
            Me.DeleteScheduleTemporaryAsync(SnNO, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub DeleteScheduleTemporaryAsync(ByVal SnNO As String, ByVal userState As Object)
            If (Me.DeleteScheduleTemporaryOperationCompleted Is Nothing) Then
                Me.DeleteScheduleTemporaryOperationCompleted = AddressOf Me.OnDeleteScheduleTemporaryOperationCompleted
            End If
            Me.InvokeAsync("DeleteScheduleTemporary", New Object() {SnNO}, Me.DeleteScheduleTemporaryOperationCompleted, userState)
        End Sub

        Private Sub OnDeleteScheduleTemporaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteScheduleTemporaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteScheduleTemporaryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/irTransmit", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub irTransmit(ByVal irNo As String)
            Me.Invoke("irTransmit", New Object() {irNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub irTransmitAsync(ByVal irNo As String)
            Me.irTransmitAsync(irNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub irTransmitAsync(ByVal irNo As String, ByVal userState As Object)
            If (Me.irTransmitOperationCompleted Is Nothing) Then
                Me.irTransmitOperationCompleted = AddressOf Me.OnirTransmitOperationCompleted
            End If
            Me.InvokeAsync("irTransmit", New Object() {irNo}, Me.irTransmitOperationCompleted, userState)
        End Sub

        Private Sub OnirTransmitOperationCompleted(ByVal arg As Object)
            If (Not (Me.irTransmitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent irTransmitCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/irStudy", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub irStudy(ByVal irNo As String)
            Me.Invoke("irStudy", New Object() {irNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub irStudyAsync(ByVal irNo As String)
            Me.irStudyAsync(irNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub irStudyAsync(ByVal irNo As String, ByVal userState As Object)
            If (Me.irStudyOperationCompleted Is Nothing) Then
                Me.irStudyOperationCompleted = AddressOf Me.OnirStudyOperationCompleted
            End If
            Me.InvokeAsync("irStudy", New Object() {irNo}, Me.irStudyOperationCompleted, userState)
        End Sub

        Private Sub OnirStudyOperationCompleted(ByVal arg As Object)
            If (Not (Me.irStudyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent irStudyCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/irSetAddress", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub irSetAddress(ByVal DeviceNo As String, ByVal NewSite As Integer)
            Me.Invoke("irSetAddress", New Object() {DeviceNo, NewSite})
        End Sub

        '''<remarks/>
        Public Overloads Sub irSetAddressAsync(ByVal DeviceNo As String, ByVal NewSite As Integer)
            Me.irSetAddressAsync(DeviceNo, NewSite, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub irSetAddressAsync(ByVal DeviceNo As String, ByVal NewSite As Integer, ByVal userState As Object)
            If (Me.irSetAddressOperationCompleted Is Nothing) Then
                Me.irSetAddressOperationCompleted = AddressOf Me.OnirSetAddressOperationCompleted
            End If
            Me.InvokeAsync("irSetAddress", New Object() {DeviceNo, NewSite}, Me.irSetAddressOperationCompleted, userState)
        End Sub

        Private Sub OnirSetAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.irSetAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent irSetAddressCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/irSetAllAddress", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub irSetAllAddress(ByVal ComPort As String, ByVal NewSite As Integer)
            Me.Invoke("irSetAllAddress", New Object() {ComPort, NewSite})
        End Sub

        '''<remarks/>
        Public Overloads Sub irSetAllAddressAsync(ByVal ComPort As String, ByVal NewSite As Integer)
            Me.irSetAllAddressAsync(ComPort, NewSite, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub irSetAllAddressAsync(ByVal ComPort As String, ByVal NewSite As Integer, ByVal userState As Object)
            If (Me.irSetAllAddressOperationCompleted Is Nothing) Then
                Me.irSetAllAddressOperationCompleted = AddressOf Me.OnirSetAllAddressOperationCompleted
            End If
            Me.InvokeAsync("irSetAllAddress", New Object() {ComPort, NewSite}, Me.irSetAllAddressOperationCompleted, userState)
        End Sub

        Private Sub OnirSetAllAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.irSetAllAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent irSetAllAddressCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/irSendCmd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub irSendCmd(ByVal ComPort As String, ByVal cmd As String)
            Me.Invoke("irSendCmd", New Object() {ComPort, cmd})
        End Sub

        '''<remarks/>
        Public Overloads Sub irSendCmdAsync(ByVal ComPort As String, ByVal cmd As String)
            Me.irSendCmdAsync(ComPort, cmd, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub irSendCmdAsync(ByVal ComPort As String, ByVal cmd As String, ByVal userState As Object)
            If (Me.irSendCmdOperationCompleted Is Nothing) Then
                Me.irSendCmdOperationCompleted = AddressOf Me.OnirSendCmdOperationCompleted
            End If
            Me.InvokeAsync("irSendCmd", New Object() {ComPort, cmd}, Me.irSendCmdOperationCompleted, userState)
        End Sub

        Private Sub OnirSendCmdOperationCompleted(ByVal arg As Object)
            If (Not (Me.irSendCmdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent irSendCmdCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/irResponeStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function irResponeStatus() As String
            Dim results() As Object = Me.Invoke("irResponeStatus", New Object(-1) {})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub irResponeStatusAsync()
            Me.irResponeStatusAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub irResponeStatusAsync(ByVal userState As Object)
            If (Me.irResponeStatusOperationCompleted Is Nothing) Then
                Me.irResponeStatusOperationCompleted = AddressOf Me.OnirResponeStatusOperationCompleted
            End If
            Me.InvokeAsync("irResponeStatus", New Object(-1) {}, Me.irResponeStatusOperationCompleted, userState)
        End Sub

        Private Sub OnirResponeStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.irResponeStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent irResponeStatusCompleted(Me, New irResponeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PorjtToInCmd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub PorjtToInCmd(ByVal FunName As String, ByVal Value As String)
            Me.Invoke("PorjtToInCmd", New Object() {FunName, Value})
        End Sub

        '''<remarks/>
        Public Overloads Sub PorjtToInCmdAsync(ByVal FunName As String, ByVal Value As String)
            Me.PorjtToInCmdAsync(FunName, Value, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub PorjtToInCmdAsync(ByVal FunName As String, ByVal Value As String, ByVal userState As Object)
            If (Me.PorjtToInCmdOperationCompleted Is Nothing) Then
                Me.PorjtToInCmdOperationCompleted = AddressOf Me.OnPorjtToInCmdOperationCompleted
            End If
            Me.InvokeAsync("PorjtToInCmd", New Object() {FunName, Value}, Me.PorjtToInCmdOperationCompleted, userState)
        End Sub

        Private Sub OnPorjtToInCmdOperationCompleted(ByVal arg As Object)
            If (Not (Me.PorjtToInCmdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PorjtToInCmdCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConfToInCmd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub ConfToInCmd(ByVal FunName As String, ByVal Value As String)
            Me.Invoke("ConfToInCmd", New Object() {FunName, Value})
        End Sub

        '''<remarks/>
        Public Overloads Sub ConfToInCmdAsync(ByVal FunName As String, ByVal Value As String)
            Me.ConfToInCmdAsync(FunName, Value, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ConfToInCmdAsync(ByVal FunName As String, ByVal Value As String, ByVal userState As Object)
            If (Me.ConfToInCmdOperationCompleted Is Nothing) Then
                Me.ConfToInCmdOperationCompleted = AddressOf Me.OnConfToInCmdOperationCompleted
            End If
            Me.InvokeAsync("ConfToInCmd", New Object() {FunName, Value}, Me.ConfToInCmdOperationCompleted, userState)
        End Sub

        Private Sub OnConfToInCmdOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfToInCmdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfToInCmdCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MusicGet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function MusicGet() As <System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfAnyType"), System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel:=1)> Object()()
            Dim results() As Object = Me.Invoke("MusicGet", New Object(-1) {})
            Return CType(results(0), Object()())
        End Function

        '''<remarks/>
        Public Overloads Sub MusicGetAsync()
            Me.MusicGetAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub MusicGetAsync(ByVal userState As Object)
            If (Me.MusicGetOperationCompleted Is Nothing) Then
                Me.MusicGetOperationCompleted = AddressOf Me.OnMusicGetOperationCompleted
            End If
            Me.InvokeAsync("MusicGet", New Object(-1) {}, Me.MusicGetOperationCompleted, userState)
        End Sub

        Private Sub OnMusicGetOperationCompleted(ByVal arg As Object)
            If (Not (Me.MusicGetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MusicGetCompleted(Me, New MusicGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MusicClear", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub MusicClear()
            Me.Invoke("MusicClear", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub MusicClearAsync()
            Me.MusicClearAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub MusicClearAsync(ByVal userState As Object)
            If (Me.MusicClearOperationCompleted Is Nothing) Then
                Me.MusicClearOperationCompleted = AddressOf Me.OnMusicClearOperationCompleted
            End If
            Me.InvokeAsync("MusicClear", New Object(-1) {}, Me.MusicClearOperationCompleted, userState)
        End Sub

        Private Sub OnMusicClearOperationCompleted(ByVal arg As Object)
            If (Not (Me.MusicClearCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MusicClearCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MusicExtUse", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub MusicExtUse(ByVal Use As Boolean)
            Me.Invoke("MusicExtUse", New Object() {Use})
        End Sub

        '''<remarks/>
        Public Overloads Sub MusicExtUseAsync(ByVal Use As Boolean)
            Me.MusicExtUseAsync(Use, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub MusicExtUseAsync(ByVal Use As Boolean, ByVal userState As Object)
            If (Me.MusicExtUseOperationCompleted Is Nothing) Then
                Me.MusicExtUseOperationCompleted = AddressOf Me.OnMusicExtUseOperationCompleted
            End If
            Me.InvokeAsync("MusicExtUse", New Object() {Use}, Me.MusicExtUseOperationCompleted, userState)
        End Sub

        Private Sub OnMusicExtUseOperationCompleted(ByVal arg As Object)
            If (Not (Me.MusicExtUseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MusicExtUseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MusicRemotAt", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub MusicRemotAt(ByVal index As Integer)
            Me.Invoke("MusicRemotAt", New Object() {index})
        End Sub

        '''<remarks/>
        Public Overloads Sub MusicRemotAtAsync(ByVal index As Integer)
            Me.MusicRemotAtAsync(index, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub MusicRemotAtAsync(ByVal index As Integer, ByVal userState As Object)
            If (Me.MusicRemotAtOperationCompleted Is Nothing) Then
                Me.MusicRemotAtOperationCompleted = AddressOf Me.OnMusicRemotAtOperationCompleted
            End If
            Me.InvokeAsync("MusicRemotAt", New Object() {index}, Me.MusicRemotAtOperationCompleted, userState)
        End Sub

        Private Sub OnMusicRemotAtOperationCompleted(ByVal arg As Object)
            If (Not (Me.MusicRemotAtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MusicRemotAtCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetMusicPopupTime", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub SetMusicPopupTime(ByVal Lenght As Integer)
            Me.Invoke("SetMusicPopupTime", New Object() {Lenght})
        End Sub

        '''<remarks/>
        Public Overloads Sub SetMusicPopupTimeAsync(ByVal Lenght As Integer)
            Me.SetMusicPopupTimeAsync(Lenght, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub SetMusicPopupTimeAsync(ByVal Lenght As Integer, ByVal userState As Object)
            If (Me.SetMusicPopupTimeOperationCompleted Is Nothing) Then
                Me.SetMusicPopupTimeOperationCompleted = AddressOf Me.OnSetMusicPopupTimeOperationCompleted
            End If
            Me.InvokeAsync("SetMusicPopupTime", New Object() {Lenght}, Me.SetMusicPopupTimeOperationCompleted, userState)
        End Sub

        Private Sub OnSetMusicPopupTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetMusicPopupTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetMusicPopupTimeCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TextGet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function TextGet() As String
            Dim results() As Object = Me.Invoke("TextGet", New Object(-1) {})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub TextGetAsync()
            Me.TextGetAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TextGetAsync(ByVal userState As Object)
            If (Me.TextGetOperationCompleted Is Nothing) Then
                Me.TextGetOperationCompleted = AddressOf Me.OnTextGetOperationCompleted
            End If
            Me.InvokeAsync("TextGet", New Object(-1) {}, Me.TextGetOperationCompleted, userState)
        End Sub

        Private Sub OnTextGetOperationCompleted(ByVal arg As Object)
            If (Not (Me.TextGetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TextGetCompleted(Me, New TextGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CameraToInCmd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub CameraToInCmd(ByVal FunNo As String, ByVal Value As String)
            Me.Invoke("CameraToInCmd", New Object() {FunNo, Value})
        End Sub

        '''<remarks/>
        Public Overloads Sub CameraToInCmdAsync(ByVal FunNo As String, ByVal Value As String)
            Me.CameraToInCmdAsync(FunNo, Value, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CameraToInCmdAsync(ByVal FunNo As String, ByVal Value As String, ByVal userState As Object)
            If (Me.CameraToInCmdOperationCompleted Is Nothing) Then
                Me.CameraToInCmdOperationCompleted = AddressOf Me.OnCameraToInCmdOperationCompleted
            End If
            Me.InvokeAsync("CameraToInCmd", New Object() {FunNo, Value}, Me.CameraToInCmdOperationCompleted, userState)
        End Sub

        Private Sub OnCameraToInCmdOperationCompleted(ByVal arg As Object)
            If (Not (Me.CameraToInCmdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CameraToInCmdCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CameraStatusList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function CameraStatusList() As <System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString"), System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel:=1)> String()()
            Dim results() As Object = Me.Invoke("CameraStatusList", New Object(-1) {})
            Return CType(results(0), String()())
        End Function

        '''<remarks/>
        Public Overloads Sub CameraStatusListAsync()
            Me.CameraStatusListAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CameraStatusListAsync(ByVal userState As Object)
            If (Me.CameraStatusListOperationCompleted Is Nothing) Then
                Me.CameraStatusListOperationCompleted = AddressOf Me.OnCameraStatusListOperationCompleted
            End If
            Me.InvokeAsync("CameraStatusList", New Object(-1) {}, Me.CameraStatusListOperationCompleted, userState)
        End Sub

        Private Sub OnCameraStatusListOperationCompleted(ByVal arg As Object)
            If (Not (Me.CameraStatusListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CameraStatusListCompleted(Me, New CameraStatusListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addUpPageStyle", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub addUpPageStyle(ByVal PageName As String, ByVal ElementId As String, ByVal FunNo As String, ByVal offsetTop As Integer, ByVal offsetLeft As Integer, ByVal offsetWidth As Integer, ByVal offsetHeight As Integer, ByVal BgImg As String)
            Me.Invoke("addUpPageStyle", New Object() {PageName, ElementId, FunNo, offsetTop, offsetLeft, offsetWidth, offsetHeight, BgImg})
        End Sub

        '''<remarks/>
        Public Overloads Sub addUpPageStyleAsync(ByVal PageName As String, ByVal ElementId As String, ByVal FunNo As String, ByVal offsetTop As Integer, ByVal offsetLeft As Integer, ByVal offsetWidth As Integer, ByVal offsetHeight As Integer, ByVal BgImg As String)
            Me.addUpPageStyleAsync(PageName, ElementId, FunNo, offsetTop, offsetLeft, offsetWidth, offsetHeight, BgImg, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub addUpPageStyleAsync(ByVal PageName As String, ByVal ElementId As String, ByVal FunNo As String, ByVal offsetTop As Integer, ByVal offsetLeft As Integer, ByVal offsetWidth As Integer, ByVal offsetHeight As Integer, ByVal BgImg As String, ByVal userState As Object)
            If (Me.addUpPageStyleOperationCompleted Is Nothing) Then
                Me.addUpPageStyleOperationCompleted = AddressOf Me.OnaddUpPageStyleOperationCompleted
            End If
            Me.InvokeAsync("addUpPageStyle", New Object() {PageName, ElementId, FunNo, offsetTop, offsetLeft, offsetWidth, offsetHeight, BgImg}, Me.addUpPageStyleOperationCompleted, userState)
        End Sub

        Private Sub OnaddUpPageStyleOperationCompleted(ByVal arg As Object)
            If (Not (Me.addUpPageStyleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addUpPageStyleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QuPageStyle", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function QuPageStyle(ByVal PageName As String, ByVal ElementId As String) As String()
            Dim results() As Object = Me.Invoke("QuPageStyle", New Object() {PageName, ElementId})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub QuPageStyleAsync(ByVal PageName As String, ByVal ElementId As String)
            Me.QuPageStyleAsync(PageName, ElementId, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub QuPageStyleAsync(ByVal PageName As String, ByVal ElementId As String, ByVal userState As Object)
            If (Me.QuPageStyleOperationCompleted Is Nothing) Then
                Me.QuPageStyleOperationCompleted = AddressOf Me.OnQuPageStyleOperationCompleted
            End If
            Me.InvokeAsync("QuPageStyle", New Object() {PageName, ElementId}, Me.QuPageStyleOperationCompleted, userState)
        End Sub

        Private Sub OnQuPageStyleOperationCompleted(ByVal arg As Object)
            If (Not (Me.QuPageStyleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QuPageStyleCompleted(Me, New QuPageStyleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelPageStyle", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub DelPageStyle(ByVal PageName As String, ByVal ElementId As String)
            Me.Invoke("DelPageStyle", New Object() {PageName, ElementId})
        End Sub

        '''<remarks/>
        Public Overloads Sub DelPageStyleAsync(ByVal PageName As String, ByVal ElementId As String)
            Me.DelPageStyleAsync(PageName, ElementId, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub DelPageStyleAsync(ByVal PageName As String, ByVal ElementId As String, ByVal userState As Object)
            If (Me.DelPageStyleOperationCompleted Is Nothing) Then
                Me.DelPageStyleOperationCompleted = AddressOf Me.OnDelPageStyleOperationCompleted
            End If
            Me.InvokeAsync("DelPageStyle", New Object() {PageName, ElementId}, Me.DelPageStyleOperationCompleted, userState)
        End Sub

        Private Sub OnDelPageStyleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelPageStyleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelPageStyleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthQuantity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function AuthQuantity() As String
            Dim results() As Object = Me.Invoke("AuthQuantity", New Object(-1) {})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub AuthQuantityAsync()
            Me.AuthQuantityAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AuthQuantityAsync(ByVal userState As Object)
            If (Me.AuthQuantityOperationCompleted Is Nothing) Then
                Me.AuthQuantityOperationCompleted = AddressOf Me.OnAuthQuantityOperationCompleted
            End If
            Me.InvokeAsync("AuthQuantity", New Object(-1) {}, Me.AuthQuantityOperationCompleted, userState)
        End Sub

        Private Sub OnAuthQuantityOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthQuantityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthQuantityCompleted(Me, New AuthQuantityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFunQut", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function AddFunQut() As String
            Dim results() As Object = Me.Invoke("AddFunQut", New Object(-1) {})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub AddFunQutAsync()
            Me.AddFunQutAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AddFunQutAsync(ByVal userState As Object)
            If (Me.AddFunQutOperationCompleted Is Nothing) Then
                Me.AddFunQutOperationCompleted = AddressOf Me.OnAddFunQutOperationCompleted
            End If
            Me.InvokeAsync("AddFunQut", New Object(-1) {}, Me.AddFunQutOperationCompleted, userState)
        End Sub

        Private Sub OnAddFunQutOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFunQutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFunQutCompleted(Me, New AddFunQutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthorityNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function AuthorityNo() As String
            Dim results() As Object = Me.Invoke("AuthorityNo", New Object(-1) {})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub AuthorityNoAsync()
            Me.AuthorityNoAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AuthorityNoAsync(ByVal userState As Object)
            If (Me.AuthorityNoOperationCompleted Is Nothing) Then
                Me.AuthorityNoOperationCompleted = AddressOf Me.OnAuthorityNoOperationCompleted
            End If
            Me.InvokeAsync("AuthorityNo", New Object(-1) {}, Me.AuthorityNoOperationCompleted, userState)
        End Sub

        Private Sub OnAuthorityNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthorityNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthorityNoCompleted(Me, New AuthorityNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function AuthStatus() As String
            Dim results() As Object = Me.Invoke("AuthStatus", New Object(-1) {})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub AuthStatusAsync()
            Me.AuthStatusAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AuthStatusAsync(ByVal userState As Object)
            If (Me.AuthStatusOperationCompleted Is Nothing) Then
                Me.AuthStatusOperationCompleted = AddressOf Me.OnAuthStatusOperationCompleted
            End If
            Me.InvokeAsync("AuthStatus", New Object(-1) {}, Me.AuthStatusOperationCompleted, userState)
        End Sub

        Private Sub OnAuthStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthStatusCompleted(Me, New AuthStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Regist_Act", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub Regist_Act()
            Me.Invoke("Regist_Act", New Object(-1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub Regist_ActAsync()
            Me.Regist_ActAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub Regist_ActAsync(ByVal userState As Object)
            If (Me.Regist_ActOperationCompleted Is Nothing) Then
                Me.Regist_ActOperationCompleted = AddressOf Me.OnRegist_ActOperationCompleted
            End If
            Me.InvokeAsync("Regist_Act", New Object(-1) {}, Me.Regist_ActOperationCompleted, userState)
        End Sub

        Private Sub OnRegist_ActOperationCompleted(ByVal arg As Object)
            If (Not (Me.Regist_ActCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Regist_ActCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetRegit", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub SetRegit(ByVal RegistNo As String, ByVal AuthNo As String, ByVal UserName As String, ByVal UserEmail As String, ByVal UserMovTel As String, ByVal UserAddress As String)
            Me.Invoke("SetRegit", New Object() {RegistNo, AuthNo, UserName, UserEmail, UserMovTel, UserAddress})
        End Sub

        '''<remarks/>
        Public Overloads Sub SetRegitAsync(ByVal RegistNo As String, ByVal AuthNo As String, ByVal UserName As String, ByVal UserEmail As String, ByVal UserMovTel As String, ByVal UserAddress As String)
            Me.SetRegitAsync(RegistNo, AuthNo, UserName, UserEmail, UserMovTel, UserAddress, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub SetRegitAsync(ByVal RegistNo As String, ByVal AuthNo As String, ByVal UserName As String, ByVal UserEmail As String, ByVal UserMovTel As String, ByVal UserAddress As String, ByVal userState As Object)
            If (Me.SetRegitOperationCompleted Is Nothing) Then
                Me.SetRegitOperationCompleted = AddressOf Me.OnSetRegitOperationCompleted
            End If
            Me.InvokeAsync("SetRegit", New Object() {RegistNo, AuthNo, UserName, UserEmail, UserMovTel, UserAddress}, Me.SetRegitOperationCompleted, userState)
        End Sub

        Private Sub OnSetRegitOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetRegitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetRegitCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegistNoMsg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function GetRegistNoMsg(ByVal RegistNo As String) As String()
            Dim results() As Object = Me.Invoke("GetRegistNoMsg", New Object() {RegistNo})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub GetRegistNoMsgAsync(ByVal RegistNo As String)
            Me.GetRegistNoMsgAsync(RegistNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub GetRegistNoMsgAsync(ByVal RegistNo As String, ByVal userState As Object)
            If (Me.GetRegistNoMsgOperationCompleted Is Nothing) Then
                Me.GetRegistNoMsgOperationCompleted = AddressOf Me.OnGetRegistNoMsgOperationCompleted
            End If
            Me.InvokeAsync("GetRegistNoMsg", New Object() {RegistNo}, Me.GetRegistNoMsgOperationCompleted, userState)
        End Sub

        Private Sub OnGetRegistNoMsgOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRegistNoMsgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRegistNoMsgCompleted(Me, New GetRegistNoMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AllRegistOpen", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub AllRegistOpen(ByVal Password As String)
            Me.Invoke("AllRegistOpen", New Object() {Password})
        End Sub

        '''<remarks/>
        Public Overloads Sub AllRegistOpenAsync(ByVal Password As String)
            Me.AllRegistOpenAsync(Password, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AllRegistOpenAsync(ByVal Password As String, ByVal userState As Object)
            If (Me.AllRegistOpenOperationCompleted Is Nothing) Then
                Me.AllRegistOpenOperationCompleted = AddressOf Me.OnAllRegistOpenOperationCompleted
            End If
            Me.InvokeAsync("AllRegistOpen", New Object() {Password}, Me.AllRegistOpenOperationCompleted, userState)
        End Sub

        Private Sub OnAllRegistOpenOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllRegistOpenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllRegistOpenCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/註冊碼取得", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function 註冊碼取得() As String()
            Dim results() As Object = Me.Invoke("註冊碼取得", New Object(-1) {})
            Return CType(results(0), String())
        End Function

        '''<remarks/>
        Public Overloads Sub 註冊碼取得Async()
            Me.註冊碼取得Async(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub 註冊碼取得Async(ByVal userState As Object)
            If (Me.註冊碼取得OperationCompleted Is Nothing) Then
                Me.註冊碼取得OperationCompleted = AddressOf Me.On註冊碼取得OperationCompleted
            End If
            Me.InvokeAsync("註冊碼取得", New Object(-1) {}, Me.註冊碼取得OperationCompleted, userState)
        End Sub

        Private Sub On註冊碼取得OperationCompleted(ByVal arg As Object)
            If (Not (Me.註冊碼取得CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent 註冊碼取得Completed(Me, New 註冊碼取得CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthNoUpdate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub AuthNoUpdate(ByVal AuthNo As String)
            Me.Invoke("AuthNoUpdate", New Object() {AuthNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub AuthNoUpdateAsync(ByVal AuthNo As String)
            Me.AuthNoUpdateAsync(AuthNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AuthNoUpdateAsync(ByVal AuthNo As String, ByVal userState As Object)
            If (Me.AuthNoUpdateOperationCompleted Is Nothing) Then
                Me.AuthNoUpdateOperationCompleted = AddressOf Me.OnAuthNoUpdateOperationCompleted
            End If
            Me.InvokeAsync("AuthNoUpdate", New Object() {AuthNo}, Me.AuthNoUpdateOperationCompleted, userState)
        End Sub

        Private Sub OnAuthNoUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthNoUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthNoUpdateCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegistNo_AuthNoUpdate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub RegistNo_AuthNoUpdate(ByVal RegistNo As String, ByVal AuthNo As String)
            Me.Invoke("RegistNo_AuthNoUpdate", New Object() {RegistNo, AuthNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub RegistNo_AuthNoUpdateAsync(ByVal RegistNo As String, ByVal AuthNo As String)
            Me.RegistNo_AuthNoUpdateAsync(RegistNo, AuthNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub RegistNo_AuthNoUpdateAsync(ByVal RegistNo As String, ByVal AuthNo As String, ByVal userState As Object)
            If (Me.RegistNo_AuthNoUpdateOperationCompleted Is Nothing) Then
                Me.RegistNo_AuthNoUpdateOperationCompleted = AddressOf Me.OnRegistNo_AuthNoUpdateOperationCompleted
            End If
            Me.InvokeAsync("RegistNo_AuthNoUpdate", New Object() {RegistNo, AuthNo}, Me.RegistNo_AuthNoUpdateOperationCompleted, userState)
        End Sub

        Private Sub OnRegistNo_AuthNoUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.RegistNo_AuthNoUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RegistNo_AuthNoUpdateCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FunNoValueUpdataRecord", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub FunNoValueUpdataRecord(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String, ByVal Value As String)
            Me.Invoke("FunNoValueUpdataRecord", New Object() {SourceUser, SourceValue, FunNo, Value})
        End Sub

        '''<remarks/>
        Public Overloads Sub FunNoValueUpdataRecordAsync(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String, ByVal Value As String)
            Me.FunNoValueUpdataRecordAsync(SourceUser, SourceValue, FunNo, Value, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub FunNoValueUpdataRecordAsync(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String, ByVal Value As String, ByVal userState As Object)
            If (Me.FunNoValueUpdataRecordOperationCompleted Is Nothing) Then
                Me.FunNoValueUpdataRecordOperationCompleted = AddressOf Me.OnFunNoValueUpdataRecordOperationCompleted
            End If
            Me.InvokeAsync("FunNoValueUpdataRecord", New Object() {SourceUser, SourceValue, FunNo, Value}, Me.FunNoValueUpdataRecordOperationCompleted, userState)
        End Sub

        Private Sub OnFunNoValueUpdataRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.FunNoValueUpdataRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FunNoValueUpdataRecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Swtich_ON_Record", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub Swtich_ON_Record(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String)
            Me.Invoke("Swtich_ON_Record", New Object() {SourceUser, SourceValue, FunNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub Swtich_ON_RecordAsync(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String)
            Me.Swtich_ON_RecordAsync(SourceUser, SourceValue, FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub Swtich_ON_RecordAsync(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String, ByVal userState As Object)
            If (Me.Swtich_ON_RecordOperationCompleted Is Nothing) Then
                Me.Swtich_ON_RecordOperationCompleted = AddressOf Me.OnSwtich_ON_RecordOperationCompleted
            End If
            Me.InvokeAsync("Swtich_ON_Record", New Object() {SourceUser, SourceValue, FunNo}, Me.Swtich_ON_RecordOperationCompleted, userState)
        End Sub

        Private Sub OnSwtich_ON_RecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.Swtich_ON_RecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Swtich_ON_RecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Swtich_OFF_Record", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub Swtich_OFF_Record(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String)
            Me.Invoke("Swtich_OFF_Record", New Object() {SourceUser, SourceValue, FunNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub Swtich_OFF_RecordAsync(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String)
            Me.Swtich_OFF_RecordAsync(SourceUser, SourceValue, FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub Swtich_OFF_RecordAsync(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String, ByVal userState As Object)
            If (Me.Swtich_OFF_RecordOperationCompleted Is Nothing) Then
                Me.Swtich_OFF_RecordOperationCompleted = AddressOf Me.OnSwtich_OFF_RecordOperationCompleted
            End If
            Me.InvokeAsync("Swtich_OFF_Record", New Object() {SourceUser, SourceValue, FunNo}, Me.Swtich_OFF_RecordOperationCompleted, userState)
        End Sub

        Private Sub OnSwtich_OFF_RecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.Swtich_OFF_RecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Swtich_OFF_RecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/No_Button_Record", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub No_Button_Record(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String)
            Me.Invoke("No_Button_Record", New Object() {SourceUser, SourceValue, FunNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub No_Button_RecordAsync(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String)
            Me.No_Button_RecordAsync(SourceUser, SourceValue, FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub No_Button_RecordAsync(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String, ByVal userState As Object)
            If (Me.No_Button_RecordOperationCompleted Is Nothing) Then
                Me.No_Button_RecordOperationCompleted = AddressOf Me.OnNo_Button_RecordOperationCompleted
            End If
            Me.InvokeAsync("No_Button_Record", New Object() {SourceUser, SourceValue, FunNo}, Me.No_Button_RecordOperationCompleted, userState)
        End Sub

        Private Sub OnNo_Button_RecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.No_Button_RecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent No_Button_RecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NC_Button_Record", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub NC_Button_Record(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String)
            Me.Invoke("NC_Button_Record", New Object() {SourceUser, SourceValue, FunNo})
        End Sub

        '''<remarks/>
        Public Overloads Sub NC_Button_RecordAsync(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String)
            Me.NC_Button_RecordAsync(SourceUser, SourceValue, FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub NC_Button_RecordAsync(ByVal SourceUser As String, ByVal SourceValue As String, ByVal FunNo As String, ByVal userState As Object)
            If (Me.NC_Button_RecordOperationCompleted Is Nothing) Then
                Me.NC_Button_RecordOperationCompleted = AddressOf Me.OnNC_Button_RecordOperationCompleted
            End If
            Me.InvokeAsync("NC_Button_Record", New Object() {SourceUser, SourceValue, FunNo}, Me.NC_Button_RecordOperationCompleted, userState)
        End Sub

        Private Sub OnNC_Button_RecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.NC_Button_RecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NC_Button_RecordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFunRec", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function GetFunRec(ByVal startDate As String, ByVal endDate As String, ByVal FunNo As String) As Object()
            Dim results() As Object = Me.Invoke("GetFunRec", New Object() {startDate, endDate, FunNo})
            Return CType(results(0), Object())
        End Function

        '''<remarks/>
        Public Overloads Sub GetFunRecAsync(ByVal startDate As String, ByVal endDate As String, ByVal FunNo As String)
            Me.GetFunRecAsync(startDate, endDate, FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub GetFunRecAsync(ByVal startDate As String, ByVal endDate As String, ByVal FunNo As String, ByVal userState As Object)
            If (Me.GetFunRecOperationCompleted Is Nothing) Then
                Me.GetFunRecOperationCompleted = AddressOf Me.OnGetFunRecOperationCompleted
            End If
            Me.InvokeAsync("GetFunRec", New Object() {startDate, endDate, FunNo}, Me.GetFunRecOperationCompleted, userState)
        End Sub

        Private Sub OnGetFunRecOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFunRecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFunRecCompleted(Me, New GetFunRecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFunRecstartEnd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function GetFunRecstartEnd(ByVal startDate As String, ByVal endDate As String, ByVal FunNo As String) As Object()
            Dim results() As Object = Me.Invoke("GetFunRecstartEnd", New Object() {startDate, endDate, FunNo})
            Return CType(results(0), Object())
        End Function

        '''<remarks/>
        Public Overloads Sub GetFunRecstartEndAsync(ByVal startDate As String, ByVal endDate As String, ByVal FunNo As String)
            Me.GetFunRecstartEndAsync(startDate, endDate, FunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub GetFunRecstartEndAsync(ByVal startDate As String, ByVal endDate As String, ByVal FunNo As String, ByVal userState As Object)
            If (Me.GetFunRecstartEndOperationCompleted Is Nothing) Then
                Me.GetFunRecstartEndOperationCompleted = AddressOf Me.OnGetFunRecstartEndOperationCompleted
            End If
            Me.InvokeAsync("GetFunRecstartEnd", New Object() {startDate, endDate, FunNo}, Me.GetFunRecstartEndOperationCompleted, userState)
        End Sub

        Private Sub OnGetFunRecstartEndOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFunRecstartEndCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFunRecstartEndCompleted(Me, New GetFunRecstartEndCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEventRec", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function GetEventRec(ByVal startDate As String, ByVal endDate As String, ByVal SourceFunNo As String, ByVal EventNo As String, ByVal TargetFunNo As String) As Object()
            Dim results() As Object = Me.Invoke("GetEventRec", New Object() {startDate, endDate, SourceFunNo, EventNo, TargetFunNo})
            Return CType(results(0), Object())
        End Function

        '''<remarks/>
        Public Overloads Sub GetEventRecAsync(ByVal startDate As String, ByVal endDate As String, ByVal SourceFunNo As String, ByVal EventNo As String, ByVal TargetFunNo As String)
            Me.GetEventRecAsync(startDate, endDate, SourceFunNo, EventNo, TargetFunNo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub GetEventRecAsync(ByVal startDate As String, ByVal endDate As String, ByVal SourceFunNo As String, ByVal EventNo As String, ByVal TargetFunNo As String, ByVal userState As Object)
            If (Me.GetEventRecOperationCompleted Is Nothing) Then
                Me.GetEventRecOperationCompleted = AddressOf Me.OnGetEventRecOperationCompleted
            End If
            Me.InvokeAsync("GetEventRec", New Object() {startDate, endDate, SourceFunNo, EventNo, TargetFunNo}, Me.GetEventRecOperationCompleted, userState)
        End Sub

        Private Sub OnGetEventRecOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEventRecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEventRecCompleted(Me, New GetEventRecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub

        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing) _
                        OrElse (url Is String.Empty)) Then
                Return False
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024) _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return True
            End If
            Return False
        End Function
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub RegistGCMCompletedEventHandler(ByVal sender As Object, ByVal e As RegistGCMCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class RegistGCMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub ifRegistGCMCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UserToSoyalAllCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UserToSoyalCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub AliasToSoyalCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub TimeZoneToSoyalCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub HolidayToSoyalCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub EraseSoyalDataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub EraseSoyalAliasCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub EraseSoyalTimeZoneCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub TimeServerCompletedEventHandler(ByVal sender As Object, ByVal e As TimeServerCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class TimeServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub FunNoValueUpdataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub FunNoValueUpdataMultipleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub Swtich_ONCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub Swtich_OFFCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub No_ButtonCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub Event_Ctrl_objCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub NC_ButtonCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub FunNoInquiryToInCmdCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub FunNoValueGetPLCCompletedEventHandler(ByVal sender As Object, ByVal e As FunNoValueGetPLCCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class FunNoValueGetPLCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub Turn_ButtonCompletedEventHandler(ByVal sender As Object, ByVal e As Turn_ButtonCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class Turn_ButtonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub objChgArrayCompletedEventHandler(ByVal sender As Object, ByVal e As objChgArrayCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class objChgArrayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub objArrayCompletedEventHandler(ByVal sender As Object, ByVal e As objArrayCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class objArrayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UserSeventScreenCompletedEventHandler(ByVal sender As Object, ByVal e As UserSeventScreenCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class UserSeventScreenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub objEventCompletedEventHandler(ByVal sender As Object, ByVal e As objEventCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class objEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub FunNoValueGetCompletedEventHandler(ByVal sender As Object, ByVal e As FunNoValueGetCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class FunNoValueGetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub objDisplyCompletedEventHandler(ByVal sender As Object, ByVal e As objDisplyCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class objDisplyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub objDisplyChgCompletedEventHandler(ByVal sender As Object, ByVal e As objDisplyChgCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class objDisplyChgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub DispRegistCompletedEventHandler(ByVal sender As Object, ByVal e As DispRegistCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class DispRegistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub DispMeterPowerCompletedEventHandler(ByVal sender As Object, ByVal e As DispMeterPowerCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class DispMeterPowerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub DisplyCompletedEventHandler(ByVal sender As Object, ByVal e As DisplyCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class DisplyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataTable)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub DisplyChgCompletedEventHandler(ByVal sender As Object, ByVal e As DisplyChgCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class DisplyChgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataTable)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub DyCompletedEventHandler(ByVal sender As Object, ByVal e As DyCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class DyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub DisplyEventCompletedEventHandler(ByVal sender As Object, ByVal e As DisplyEventCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class DisplyEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataTable)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub EventHodeScreenCompletedEventHandler(ByVal sender As Object, ByVal e As EventHodeScreenCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class EventHodeScreenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataTable)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub 通信狀態CompletedEventHandler(ByVal sender As Object, ByVal e As 通信狀態CompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class 通信狀態CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataTable)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdateCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdateSerialPortCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdateDeviceCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdateFunNoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdateTimerTemporaryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdateTimerEventCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdateEvevtsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdateEvevtPLC_Music_CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdateDoorCardCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdateScanCmdCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UpdataScanCmdPortCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub UdateTxtMsgChCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub InsertScheduleTemporaryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub SearchScheduleTemporaryCompletedEventHandler(ByVal sender As Object, ByVal e As SearchScheduleTemporaryCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class SearchScheduleTemporaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Object())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub DeleteScheduleTemporaryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub irTransmitCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub irStudyCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub irSetAddressCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub irSetAllAddressCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub irSendCmdCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub irResponeStatusCompletedEventHandler(ByVal sender As Object, ByVal e As irResponeStatusCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class irResponeStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub PorjtToInCmdCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub ConfToInCmdCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub MusicGetCompletedEventHandler(ByVal sender As Object, ByVal e As MusicGetCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class MusicGetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Object()()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Object()())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub MusicClearCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub MusicExtUseCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub MusicRemotAtCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub SetMusicPopupTimeCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub TextGetCompletedEventHandler(ByVal sender As Object, ByVal e As TextGetCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class TextGetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub CameraToInCmdCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub CameraStatusListCompletedEventHandler(ByVal sender As Object, ByVal e As CameraStatusListCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class CameraStatusListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String()())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub addUpPageStyleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub QuPageStyleCompletedEventHandler(ByVal sender As Object, ByVal e As QuPageStyleCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class QuPageStyleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub DelPageStyleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub AuthQuantityCompletedEventHandler(ByVal sender As Object, ByVal e As AuthQuantityCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class AuthQuantityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub AddFunQutCompletedEventHandler(ByVal sender As Object, ByVal e As AddFunQutCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class AddFunQutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub AuthorityNoCompletedEventHandler(ByVal sender As Object, ByVal e As AuthorityNoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class AuthorityNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub AuthStatusCompletedEventHandler(ByVal sender As Object, ByVal e As AuthStatusCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class AuthStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub Regist_ActCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub SetRegitCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub GetRegistNoMsgCompletedEventHandler(ByVal sender As Object, ByVal e As GetRegistNoMsgCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class GetRegistNoMsgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub AllRegistOpenCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub 註冊碼取得CompletedEventHandler(ByVal sender As Object, ByVal e As 註冊碼取得CompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class 註冊碼取得CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub AuthNoUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub RegistNo_AuthNoUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub FunNoValueUpdataRecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub Swtich_ON_RecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub Swtich_OFF_RecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub No_Button_RecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub NC_Button_RecordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub GetFunRecCompletedEventHandler(ByVal sender As Object, ByVal e As GetFunRecCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class GetFunRecCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Object())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub GetFunRecstartEndCompletedEventHandler(ByVal sender As Object, ByVal e As GetFunRecstartEndCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class GetFunRecstartEndCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Object())
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>
    Public Delegate Sub GetEventRecCompletedEventHandler(ByVal sender As Object, ByVal e As GetEventRecCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class GetEventRecCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Object())
            End Get
        End Property
    End Class
End Namespace
